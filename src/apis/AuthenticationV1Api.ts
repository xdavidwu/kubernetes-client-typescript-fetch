/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.28.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1APIResourceList,
  V1SelfSubjectReview,
  V1TokenReview,
} from '../models/index';
import {
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1SelfSubjectReviewFromJSON,
    V1SelfSubjectReviewToJSON,
    V1TokenReviewFromJSON,
    V1TokenReviewToJSON,
} from '../models/index';

export interface AuthenticationV1ApiCreateSelfSubjectReviewRequest {
    body: V1SelfSubjectReview;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
}

export interface AuthenticationV1ApiCreateTokenReviewRequest {
    body: V1TokenReview;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
}

/**
 * 
 */
export class AuthenticationV1Api extends runtime.BaseAPI {

    /**
     * create a SelfSubjectReview
     */
    async createSelfSubjectReviewRaw(requestParameters: AuthenticationV1ApiCreateSelfSubjectReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SelfSubjectReview>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createSelfSubjectReview.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authentication.k8s.io/v1/selfsubjectreviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1SelfSubjectReviewToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SelfSubjectReviewFromJSON(jsonValue));
    }

    /**
     * create a SelfSubjectReview
     */
    async createSelfSubjectReview(requestParameters: AuthenticationV1ApiCreateSelfSubjectReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SelfSubjectReview> {
        const response = await this.createSelfSubjectReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a TokenReview
     */
    async createTokenReviewRaw(requestParameters: AuthenticationV1ApiCreateTokenReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1TokenReview>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createTokenReview.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authentication.k8s.io/v1/tokenreviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1TokenReviewToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TokenReviewFromJSON(jsonValue));
    }

    /**
     * create a TokenReview
     */
    async createTokenReview(requestParameters: AuthenticationV1ApiCreateTokenReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1TokenReview> {
        const response = await this.createTokenReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authentication.k8s.io/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw(initOverrides);
        return await response.value();
    }

}
