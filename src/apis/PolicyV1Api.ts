/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    V1APIResourceList,
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1DeleteOptions,
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
    V1PodDisruptionBudget,
    V1PodDisruptionBudgetFromJSON,
    V1PodDisruptionBudgetToJSON,
    V1PodDisruptionBudgetList,
    V1PodDisruptionBudgetListFromJSON,
    V1PodDisruptionBudgetListToJSON,
    V1Status,
    V1StatusFromJSON,
    V1StatusToJSON,
} from '../models';

export interface PolicyV1ApiCreateNamespacedPodDisruptionBudgetRequest {
    namespace: string;
    body: V1PodDisruptionBudget;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface PolicyV1ApiDeleteCollectionNamespacedPodDisruptionBudgetRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface PolicyV1ApiDeleteNamespacedPodDisruptionBudgetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface PolicyV1ApiListNamespacedPodDisruptionBudgetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PolicyV1ApiListPodDisruptionBudgetForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PolicyV1ApiPatchNamespacedPodDisruptionBudgetRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PolicyV1ApiPatchNamespacedPodDisruptionBudgetStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PolicyV1ApiReadNamespacedPodDisruptionBudgetRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface PolicyV1ApiReadNamespacedPodDisruptionBudgetStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface PolicyV1ApiReplaceNamespacedPodDisruptionBudgetRequest {
    name: string;
    namespace: string;
    body: V1PodDisruptionBudget;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface PolicyV1ApiReplaceNamespacedPodDisruptionBudgetStatusRequest {
    name: string;
    namespace: string;
    body: V1PodDisruptionBudget;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

/**
 * 
 */
export class PolicyV1Api extends runtime.BaseAPI {

    /**
     * create a PodDisruptionBudget
     */
    async createNamespacedPodDisruptionBudgetRaw(requestParameters: PolicyV1ApiCreateNamespacedPodDisruptionBudgetRequest): Promise<runtime.ApiResponse<V1PodDisruptionBudget>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createNamespacedPodDisruptionBudget.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1PodDisruptionBudgetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * create a PodDisruptionBudget
     */
    async createNamespacedPodDisruptionBudget(requestParameters: PolicyV1ApiCreateNamespacedPodDisruptionBudgetRequest): Promise<V1PodDisruptionBudget> {
        const response = await this.createNamespacedPodDisruptionBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of PodDisruptionBudget
     */
    async deleteCollectionNamespacedPodDisruptionBudgetRaw(requestParameters: PolicyV1ApiDeleteCollectionNamespacedPodDisruptionBudgetRequest): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of PodDisruptionBudget
     */
    async deleteCollectionNamespacedPodDisruptionBudget(requestParameters: PolicyV1ApiDeleteCollectionNamespacedPodDisruptionBudgetRequest): Promise<V1Status> {
        const response = await this.deleteCollectionNamespacedPodDisruptionBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a PodDisruptionBudget
     */
    async deleteNamespacedPodDisruptionBudgetRaw(requestParameters: PolicyV1ApiDeleteNamespacedPodDisruptionBudgetRequest): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNamespacedPodDisruptionBudget.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a PodDisruptionBudget
     */
    async deleteNamespacedPodDisruptionBudget(requestParameters: PolicyV1ApiDeleteNamespacedPodDisruptionBudgetRequest): Promise<V1Status> {
        const response = await this.deleteNamespacedPodDisruptionBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind PodDisruptionBudget
     */
    async listNamespacedPodDisruptionBudgetRaw(requestParameters: PolicyV1ApiListNamespacedPodDisruptionBudgetRequest): Promise<runtime.ApiResponse<V1PodDisruptionBudgetList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PodDisruptionBudgetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PodDisruptionBudget
     */
    async listNamespacedPodDisruptionBudget(requestParameters: PolicyV1ApiListNamespacedPodDisruptionBudgetRequest): Promise<V1PodDisruptionBudgetList> {
        const response = await this.listNamespacedPodDisruptionBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind PodDisruptionBudget
     */
    async listPodDisruptionBudgetForAllNamespacesRaw(requestParameters: PolicyV1ApiListPodDisruptionBudgetForAllNamespacesRequest): Promise<runtime.ApiResponse<V1PodDisruptionBudgetList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/poddisruptionbudgets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PodDisruptionBudgetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PodDisruptionBudget
     */
    async listPodDisruptionBudgetForAllNamespaces(requestParameters: PolicyV1ApiListPodDisruptionBudgetForAllNamespacesRequest): Promise<V1PodDisruptionBudgetList> {
        const response = await this.listPodDisruptionBudgetForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified PodDisruptionBudget
     */
    async patchNamespacedPodDisruptionBudgetRaw(requestParameters: PolicyV1ApiPatchNamespacedPodDisruptionBudgetRequest): Promise<runtime.ApiResponse<V1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodDisruptionBudget.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodDisruptionBudget.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * partially update the specified PodDisruptionBudget
     */
    async patchNamespacedPodDisruptionBudget(requestParameters: PolicyV1ApiPatchNamespacedPodDisruptionBudgetRequest): Promise<V1PodDisruptionBudget> {
        const response = await this.patchNamespacedPodDisruptionBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified PodDisruptionBudget
     */
    async patchNamespacedPodDisruptionBudgetStatusRaw(requestParameters: PolicyV1ApiPatchNamespacedPodDisruptionBudgetStatusRequest): Promise<runtime.ApiResponse<V1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified PodDisruptionBudget
     */
    async patchNamespacedPodDisruptionBudgetStatus(requestParameters: PolicyV1ApiPatchNamespacedPodDisruptionBudgetStatusRequest): Promise<V1PodDisruptionBudget> {
        const response = await this.patchNamespacedPodDisruptionBudgetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified PodDisruptionBudget
     */
    async readNamespacedPodDisruptionBudgetRaw(requestParameters: PolicyV1ApiReadNamespacedPodDisruptionBudgetRequest): Promise<runtime.ApiResponse<V1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNamespacedPodDisruptionBudget.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * read the specified PodDisruptionBudget
     */
    async readNamespacedPodDisruptionBudget(requestParameters: PolicyV1ApiReadNamespacedPodDisruptionBudgetRequest): Promise<V1PodDisruptionBudget> {
        const response = await this.readNamespacedPodDisruptionBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified PodDisruptionBudget
     */
    async readNamespacedPodDisruptionBudgetStatusRaw(requestParameters: PolicyV1ApiReadNamespacedPodDisruptionBudgetStatusRequest): Promise<runtime.ApiResponse<V1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNamespacedPodDisruptionBudgetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodDisruptionBudgetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * read status of the specified PodDisruptionBudget
     */
    async readNamespacedPodDisruptionBudgetStatus(requestParameters: PolicyV1ApiReadNamespacedPodDisruptionBudgetStatusRequest): Promise<V1PodDisruptionBudget> {
        const response = await this.readNamespacedPodDisruptionBudgetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified PodDisruptionBudget
     */
    async replaceNamespacedPodDisruptionBudgetRaw(requestParameters: PolicyV1ApiReplaceNamespacedPodDisruptionBudgetRequest): Promise<runtime.ApiResponse<V1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodDisruptionBudget.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodDisruptionBudget.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodDisruptionBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1PodDisruptionBudgetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * replace the specified PodDisruptionBudget
     */
    async replaceNamespacedPodDisruptionBudget(requestParameters: PolicyV1ApiReplaceNamespacedPodDisruptionBudgetRequest): Promise<V1PodDisruptionBudget> {
        const response = await this.replaceNamespacedPodDisruptionBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified PodDisruptionBudget
     */
    async replaceNamespacedPodDisruptionBudgetStatusRaw(requestParameters: PolicyV1ApiReplaceNamespacedPodDisruptionBudgetStatusRequest): Promise<runtime.ApiResponse<V1PodDisruptionBudget>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1PodDisruptionBudgetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PodDisruptionBudgetFromJSON(jsonValue));
    }

    /**
     * replace status of the specified PodDisruptionBudget
     */
    async replaceNamespacedPodDisruptionBudgetStatus(requestParameters: PolicyV1ApiReplaceNamespacedPodDisruptionBudgetStatusRequest): Promise<V1PodDisruptionBudget> {
        const response = await this.replaceNamespacedPodDisruptionBudgetStatusRaw(requestParameters);
        return await response.value();
    }

}
