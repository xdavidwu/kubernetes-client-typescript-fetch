/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1APIResourceList,
  V1CSIDriver,
  V1CSIDriverList,
  V1CSINode,
  V1CSINodeList,
  V1CSIStorageCapacity,
  V1CSIStorageCapacityList,
  V1DeleteOptions,
  V1Status,
  V1StorageClass,
  V1StorageClassList,
  V1VolumeAttachment,
  V1VolumeAttachmentList,
} from '../models/index';
import {
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1CSIDriverFromJSON,
    V1CSIDriverToJSON,
    V1CSIDriverListFromJSON,
    V1CSIDriverListToJSON,
    V1CSINodeFromJSON,
    V1CSINodeToJSON,
    V1CSINodeListFromJSON,
    V1CSINodeListToJSON,
    V1CSIStorageCapacityFromJSON,
    V1CSIStorageCapacityToJSON,
    V1CSIStorageCapacityListFromJSON,
    V1CSIStorageCapacityListToJSON,
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
    V1StatusFromJSON,
    V1StatusToJSON,
    V1StorageClassFromJSON,
    V1StorageClassToJSON,
    V1StorageClassListFromJSON,
    V1StorageClassListToJSON,
    V1VolumeAttachmentFromJSON,
    V1VolumeAttachmentToJSON,
    V1VolumeAttachmentListFromJSON,
    V1VolumeAttachmentListToJSON,
} from '../models/index';

export interface StorageV1ApiCreateCSIDriverRequest {
    body: V1CSIDriver;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface StorageV1ApiCreateCSINodeRequest {
    body: V1CSINode;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface StorageV1ApiCreateNamespacedCSIStorageCapacityRequest {
    namespace: string;
    body: V1CSIStorageCapacity;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface StorageV1ApiCreateStorageClassRequest {
    body: V1StorageClass;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface StorageV1ApiCreateVolumeAttachmentRequest {
    body: V1VolumeAttachment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface StorageV1ApiDeleteCSIDriverRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface StorageV1ApiDeleteCSINodeRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface StorageV1ApiDeleteCollectionCSIDriverRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface StorageV1ApiDeleteCollectionCSINodeRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface StorageV1ApiDeleteCollectionNamespacedCSIStorageCapacityRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface StorageV1ApiDeleteCollectionStorageClassRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface StorageV1ApiDeleteCollectionVolumeAttachmentRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface StorageV1ApiDeleteNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface StorageV1ApiDeleteStorageClassRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface StorageV1ApiDeleteVolumeAttachmentRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface StorageV1ApiListCSIDriverRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface StorageV1ApiListCSINodeRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface StorageV1ApiListCSIStorageCapacityForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface StorageV1ApiListNamespacedCSIStorageCapacityRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface StorageV1ApiListStorageClassRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface StorageV1ApiListVolumeAttachmentRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface StorageV1ApiPatchCSIDriverRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface StorageV1ApiPatchCSINodeRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface StorageV1ApiPatchNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface StorageV1ApiPatchStorageClassRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface StorageV1ApiPatchVolumeAttachmentRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface StorageV1ApiPatchVolumeAttachmentStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface StorageV1ApiReadCSIDriverRequest {
    name: string;
    pretty?: string;
}

export interface StorageV1ApiReadCSINodeRequest {
    name: string;
    pretty?: string;
}

export interface StorageV1ApiReadNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface StorageV1ApiReadStorageClassRequest {
    name: string;
    pretty?: string;
}

export interface StorageV1ApiReadVolumeAttachmentRequest {
    name: string;
    pretty?: string;
}

export interface StorageV1ApiReadVolumeAttachmentStatusRequest {
    name: string;
    pretty?: string;
}

export interface StorageV1ApiReplaceCSIDriverRequest {
    name: string;
    body: V1CSIDriver;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface StorageV1ApiReplaceCSINodeRequest {
    name: string;
    body: V1CSINode;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface StorageV1ApiReplaceNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    body: V1CSIStorageCapacity;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface StorageV1ApiReplaceStorageClassRequest {
    name: string;
    body: V1StorageClass;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface StorageV1ApiReplaceVolumeAttachmentRequest {
    name: string;
    body: V1VolumeAttachment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface StorageV1ApiReplaceVolumeAttachmentStatusRequest {
    name: string;
    body: V1VolumeAttachment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

/**
 * 
 */
export class StorageV1Api extends runtime.BaseAPI {

    /**
     * create a CSIDriver
     */
    async createCSIDriverRaw(requestParameters: StorageV1ApiCreateCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIDriver>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createCSIDriver().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csidrivers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CSIDriverToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIDriverFromJSON(jsonValue));
    }

    /**
     * create a CSIDriver
     */
    async createCSIDriver(requestParameters: StorageV1ApiCreateCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIDriver> {
        const response = await this.createCSIDriverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a CSINode
     */
    async createCSINodeRaw(requestParameters: StorageV1ApiCreateCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSINode>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createCSINode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csinodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CSINodeToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSINodeFromJSON(jsonValue));
    }

    /**
     * create a CSINode
     */
    async createCSINode(requestParameters: StorageV1ApiCreateCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSINode> {
        const response = await this.createCSINodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a CSIStorageCapacity
     */
    async createNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiCreateNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIStorageCapacity>> {
        if (requestParameters['namespace'] == null) {
            throw new runtime.RequiredError(
                'namespace',
                'Required parameter "namespace" was null or undefined when calling createNamespacedCSIStorageCapacity().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createNamespacedCSIStorageCapacity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CSIStorageCapacityToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIStorageCapacityFromJSON(jsonValue));
    }

    /**
     * create a CSIStorageCapacity
     */
    async createNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiCreateNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIStorageCapacity> {
        const response = await this.createNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a StorageClass
     */
    async createStorageClassRaw(requestParameters: StorageV1ApiCreateStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1StorageClass>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createStorageClass().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/storageclasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1StorageClassToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StorageClassFromJSON(jsonValue));
    }

    /**
     * create a StorageClass
     */
    async createStorageClass(requestParameters: StorageV1ApiCreateStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1StorageClass> {
        const response = await this.createStorageClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a VolumeAttachment
     */
    async createVolumeAttachmentRaw(requestParameters: StorageV1ApiCreateVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createVolumeAttachment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/volumeattachments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1VolumeAttachmentToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * create a VolumeAttachment
     */
    async createVolumeAttachment(requestParameters: StorageV1ApiCreateVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1VolumeAttachment> {
        const response = await this.createVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a CSIDriver
     */
    async deleteCSIDriverRaw(requestParameters: StorageV1ApiDeleteCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIDriver>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCSIDriver().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csidrivers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIDriverFromJSON(jsonValue));
    }

    /**
     * delete a CSIDriver
     */
    async deleteCSIDriver(requestParameters: StorageV1ApiDeleteCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIDriver> {
        const response = await this.deleteCSIDriverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a CSINode
     */
    async deleteCSINodeRaw(requestParameters: StorageV1ApiDeleteCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSINode>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCSINode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csinodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSINodeFromJSON(jsonValue));
    }

    /**
     * delete a CSINode
     */
    async deleteCSINode(requestParameters: StorageV1ApiDeleteCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSINode> {
        const response = await this.deleteCSINodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of CSIDriver
     */
    async deleteCollectionCSIDriverRaw(requestParameters: StorageV1ApiDeleteCollectionCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csidrivers`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of CSIDriver
     */
    async deleteCollectionCSIDriver(requestParameters: StorageV1ApiDeleteCollectionCSIDriverRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionCSIDriverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of CSINode
     */
    async deleteCollectionCSINodeRaw(requestParameters: StorageV1ApiDeleteCollectionCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csinodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of CSINode
     */
    async deleteCollectionCSINode(requestParameters: StorageV1ApiDeleteCollectionCSINodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionCSINodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of CSIStorageCapacity
     */
    async deleteCollectionNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiDeleteCollectionNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters['namespace'] == null) {
            throw new runtime.RequiredError(
                'namespace',
                'Required parameter "namespace" was null or undefined when calling deleteCollectionNamespacedCSIStorageCapacity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of CSIStorageCapacity
     */
    async deleteCollectionNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiDeleteCollectionNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of StorageClass
     */
    async deleteCollectionStorageClassRaw(requestParameters: StorageV1ApiDeleteCollectionStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/storageclasses`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of StorageClass
     */
    async deleteCollectionStorageClass(requestParameters: StorageV1ApiDeleteCollectionStorageClassRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionStorageClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of VolumeAttachment
     */
    async deleteCollectionVolumeAttachmentRaw(requestParameters: StorageV1ApiDeleteCollectionVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/volumeattachments`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of VolumeAttachment
     */
    async deleteCollectionVolumeAttachment(requestParameters: StorageV1ApiDeleteCollectionVolumeAttachmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a CSIStorageCapacity
     */
    async deleteNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiDeleteNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteNamespacedCSIStorageCapacity().'
            );
        }

        if (requestParameters['namespace'] == null) {
            throw new runtime.RequiredError(
                'namespace',
                'Required parameter "namespace" was null or undefined when calling deleteNamespacedCSIStorageCapacity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a CSIStorageCapacity
     */
    async deleteNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiDeleteNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a StorageClass
     */
    async deleteStorageClassRaw(requestParameters: StorageV1ApiDeleteStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1StorageClass>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteStorageClass().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/storageclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StorageClassFromJSON(jsonValue));
    }

    /**
     * delete a StorageClass
     */
    async deleteStorageClass(requestParameters: StorageV1ApiDeleteStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1StorageClass> {
        const response = await this.deleteStorageClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a VolumeAttachment
     */
    async deleteVolumeAttachmentRaw(requestParameters: StorageV1ApiDeleteVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteVolumeAttachment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/volumeattachments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * delete a VolumeAttachment
     */
    async deleteVolumeAttachment(requestParameters: StorageV1ApiDeleteVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1VolumeAttachment> {
        const response = await this.deleteVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind CSIDriver
     */
    async listCSIDriverRaw(requestParameters: StorageV1ApiListCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIDriverList>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csidrivers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIDriverListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CSIDriver
     */
    async listCSIDriver(requestParameters: StorageV1ApiListCSIDriverRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIDriverList> {
        const response = await this.listCSIDriverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind CSINode
     */
    async listCSINodeRaw(requestParameters: StorageV1ApiListCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSINodeList>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csinodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSINodeListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CSINode
     */
    async listCSINode(requestParameters: StorageV1ApiListCSINodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSINodeList> {
        const response = await this.listCSINodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    async listCSIStorageCapacityForAllNamespacesRaw(requestParameters: StorageV1ApiListCSIStorageCapacityForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIStorageCapacityList>> {
        const queryParameters: any = {};

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csistoragecapacities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIStorageCapacityListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    async listCSIStorageCapacityForAllNamespaces(requestParameters: StorageV1ApiListCSIStorageCapacityForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIStorageCapacityList> {
        const response = await this.listCSIStorageCapacityForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    async listNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiListNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIStorageCapacityList>> {
        if (requestParameters['namespace'] == null) {
            throw new runtime.RequiredError(
                'namespace',
                'Required parameter "namespace" was null or undefined when calling listNamespacedCSIStorageCapacity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIStorageCapacityListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    async listNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiListNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIStorageCapacityList> {
        const response = await this.listNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind StorageClass
     */
    async listStorageClassRaw(requestParameters: StorageV1ApiListStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1StorageClassList>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/storageclasses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StorageClassListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind StorageClass
     */
    async listStorageClass(requestParameters: StorageV1ApiListStorageClassRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1StorageClassList> {
        const response = await this.listStorageClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind VolumeAttachment
     */
    async listVolumeAttachmentRaw(requestParameters: StorageV1ApiListVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1VolumeAttachmentList>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/volumeattachments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1VolumeAttachmentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind VolumeAttachment
     */
    async listVolumeAttachment(requestParameters: StorageV1ApiListVolumeAttachmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1VolumeAttachmentList> {
        const response = await this.listVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified CSIDriver
     */
    async patchCSIDriverRaw(requestParameters: StorageV1ApiPatchCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIDriver>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCSIDriver().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchCSIDriver().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csidrivers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIDriverFromJSON(jsonValue));
    }

    /**
     * partially update the specified CSIDriver
     */
    async patchCSIDriver(requestParameters: StorageV1ApiPatchCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIDriver> {
        const response = await this.patchCSIDriverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified CSINode
     */
    async patchCSINodeRaw(requestParameters: StorageV1ApiPatchCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSINode>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCSINode().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchCSINode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csinodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSINodeFromJSON(jsonValue));
    }

    /**
     * partially update the specified CSINode
     */
    async patchCSINode(requestParameters: StorageV1ApiPatchCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSINode> {
        const response = await this.patchCSINodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified CSIStorageCapacity
     */
    async patchNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiPatchNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIStorageCapacity>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchNamespacedCSIStorageCapacity().'
            );
        }

        if (requestParameters['namespace'] == null) {
            throw new runtime.RequiredError(
                'namespace',
                'Required parameter "namespace" was null or undefined when calling patchNamespacedCSIStorageCapacity().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchNamespacedCSIStorageCapacity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIStorageCapacityFromJSON(jsonValue));
    }

    /**
     * partially update the specified CSIStorageCapacity
     */
    async patchNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiPatchNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIStorageCapacity> {
        const response = await this.patchNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified StorageClass
     */
    async patchStorageClassRaw(requestParameters: StorageV1ApiPatchStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1StorageClass>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchStorageClass().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchStorageClass().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/storageclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StorageClassFromJSON(jsonValue));
    }

    /**
     * partially update the specified StorageClass
     */
    async patchStorageClass(requestParameters: StorageV1ApiPatchStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1StorageClass> {
        const response = await this.patchStorageClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified VolumeAttachment
     */
    async patchVolumeAttachmentRaw(requestParameters: StorageV1ApiPatchVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchVolumeAttachment().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchVolumeAttachment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/volumeattachments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * partially update the specified VolumeAttachment
     */
    async patchVolumeAttachment(requestParameters: StorageV1ApiPatchVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1VolumeAttachment> {
        const response = await this.patchVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified VolumeAttachment
     */
    async patchVolumeAttachmentStatusRaw(requestParameters: StorageV1ApiPatchVolumeAttachmentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchVolumeAttachmentStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchVolumeAttachmentStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/volumeattachments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified VolumeAttachment
     */
    async patchVolumeAttachmentStatus(requestParameters: StorageV1ApiPatchVolumeAttachmentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1VolumeAttachment> {
        const response = await this.patchVolumeAttachmentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified CSIDriver
     */
    async readCSIDriverRaw(requestParameters: StorageV1ApiReadCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIDriver>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readCSIDriver().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csidrivers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIDriverFromJSON(jsonValue));
    }

    /**
     * read the specified CSIDriver
     */
    async readCSIDriver(requestParameters: StorageV1ApiReadCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIDriver> {
        const response = await this.readCSIDriverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified CSINode
     */
    async readCSINodeRaw(requestParameters: StorageV1ApiReadCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSINode>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readCSINode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csinodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSINodeFromJSON(jsonValue));
    }

    /**
     * read the specified CSINode
     */
    async readCSINode(requestParameters: StorageV1ApiReadCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSINode> {
        const response = await this.readCSINodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified CSIStorageCapacity
     */
    async readNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiReadNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIStorageCapacity>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readNamespacedCSIStorageCapacity().'
            );
        }

        if (requestParameters['namespace'] == null) {
            throw new runtime.RequiredError(
                'namespace',
                'Required parameter "namespace" was null or undefined when calling readNamespacedCSIStorageCapacity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIStorageCapacityFromJSON(jsonValue));
    }

    /**
     * read the specified CSIStorageCapacity
     */
    async readNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiReadNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIStorageCapacity> {
        const response = await this.readNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified StorageClass
     */
    async readStorageClassRaw(requestParameters: StorageV1ApiReadStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1StorageClass>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readStorageClass().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/storageclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StorageClassFromJSON(jsonValue));
    }

    /**
     * read the specified StorageClass
     */
    async readStorageClass(requestParameters: StorageV1ApiReadStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1StorageClass> {
        const response = await this.readStorageClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified VolumeAttachment
     */
    async readVolumeAttachmentRaw(requestParameters: StorageV1ApiReadVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readVolumeAttachment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/volumeattachments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * read the specified VolumeAttachment
     */
    async readVolumeAttachment(requestParameters: StorageV1ApiReadVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1VolumeAttachment> {
        const response = await this.readVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified VolumeAttachment
     */
    async readVolumeAttachmentStatusRaw(requestParameters: StorageV1ApiReadVolumeAttachmentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readVolumeAttachmentStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/volumeattachments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * read status of the specified VolumeAttachment
     */
    async readVolumeAttachmentStatus(requestParameters: StorageV1ApiReadVolumeAttachmentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1VolumeAttachment> {
        const response = await this.readVolumeAttachmentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified CSIDriver
     */
    async replaceCSIDriverRaw(requestParameters: StorageV1ApiReplaceCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIDriver>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceCSIDriver().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceCSIDriver().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csidrivers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CSIDriverToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIDriverFromJSON(jsonValue));
    }

    /**
     * replace the specified CSIDriver
     */
    async replaceCSIDriver(requestParameters: StorageV1ApiReplaceCSIDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIDriver> {
        const response = await this.replaceCSIDriverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified CSINode
     */
    async replaceCSINodeRaw(requestParameters: StorageV1ApiReplaceCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSINode>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceCSINode().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceCSINode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/csinodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CSINodeToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSINodeFromJSON(jsonValue));
    }

    /**
     * replace the specified CSINode
     */
    async replaceCSINode(requestParameters: StorageV1ApiReplaceCSINodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSINode> {
        const response = await this.replaceCSINodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified CSIStorageCapacity
     */
    async replaceNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiReplaceNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CSIStorageCapacity>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceNamespacedCSIStorageCapacity().'
            );
        }

        if (requestParameters['namespace'] == null) {
            throw new runtime.RequiredError(
                'namespace',
                'Required parameter "namespace" was null or undefined when calling replaceNamespacedCSIStorageCapacity().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceNamespacedCSIStorageCapacity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CSIStorageCapacityToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CSIStorageCapacityFromJSON(jsonValue));
    }

    /**
     * replace the specified CSIStorageCapacity
     */
    async replaceNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiReplaceNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CSIStorageCapacity> {
        const response = await this.replaceNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified StorageClass
     */
    async replaceStorageClassRaw(requestParameters: StorageV1ApiReplaceStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1StorageClass>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceStorageClass().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceStorageClass().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/storageclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1StorageClassToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StorageClassFromJSON(jsonValue));
    }

    /**
     * replace the specified StorageClass
     */
    async replaceStorageClass(requestParameters: StorageV1ApiReplaceStorageClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1StorageClass> {
        const response = await this.replaceStorageClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified VolumeAttachment
     */
    async replaceVolumeAttachmentRaw(requestParameters: StorageV1ApiReplaceVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceVolumeAttachment().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceVolumeAttachment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/volumeattachments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1VolumeAttachmentToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * replace the specified VolumeAttachment
     */
    async replaceVolumeAttachment(requestParameters: StorageV1ApiReplaceVolumeAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1VolumeAttachment> {
        const response = await this.replaceVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified VolumeAttachment
     */
    async replaceVolumeAttachmentStatusRaw(requestParameters: StorageV1ApiReplaceVolumeAttachmentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1VolumeAttachment>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceVolumeAttachmentStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceVolumeAttachmentStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1/volumeattachments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1VolumeAttachmentToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * replace status of the specified VolumeAttachment
     */
    async replaceVolumeAttachmentStatus(requestParameters: StorageV1ApiReplaceVolumeAttachmentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1VolumeAttachment> {
        const response = await this.replaceVolumeAttachmentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
