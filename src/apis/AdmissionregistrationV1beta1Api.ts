/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.28.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1APIResourceList,
  V1DeleteOptions,
  V1Status,
  V1beta1ValidatingAdmissionPolicy,
  V1beta1ValidatingAdmissionPolicyBinding,
  V1beta1ValidatingAdmissionPolicyBindingList,
  V1beta1ValidatingAdmissionPolicyList,
} from '../models/index';
import {
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
    V1StatusFromJSON,
    V1StatusToJSON,
    V1beta1ValidatingAdmissionPolicyFromJSON,
    V1beta1ValidatingAdmissionPolicyToJSON,
    V1beta1ValidatingAdmissionPolicyBindingFromJSON,
    V1beta1ValidatingAdmissionPolicyBindingToJSON,
    V1beta1ValidatingAdmissionPolicyBindingListFromJSON,
    V1beta1ValidatingAdmissionPolicyBindingListToJSON,
    V1beta1ValidatingAdmissionPolicyListFromJSON,
    V1beta1ValidatingAdmissionPolicyListToJSON,
} from '../models/index';

export interface AdmissionregistrationV1beta1ApiCreateValidatingAdmissionPolicyRequest {
    body: V1beta1ValidatingAdmissionPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1beta1ApiCreateValidatingAdmissionPolicyBindingRequest {
    body: V1beta1ValidatingAdmissionPolicyBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1beta1ApiDeleteCollectionValidatingAdmissionPolicyRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1beta1ApiDeleteCollectionValidatingAdmissionPolicyBindingRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1beta1ApiDeleteValidatingAdmissionPolicyRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1beta1ApiDeleteValidatingAdmissionPolicyBindingRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1beta1ApiListValidatingAdmissionPolicyRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface AdmissionregistrationV1beta1ApiListValidatingAdmissionPolicyBindingRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface AdmissionregistrationV1beta1ApiPatchValidatingAdmissionPolicyRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface AdmissionregistrationV1beta1ApiPatchValidatingAdmissionPolicyBindingRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface AdmissionregistrationV1beta1ApiPatchValidatingAdmissionPolicyStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface AdmissionregistrationV1beta1ApiReadValidatingAdmissionPolicyRequest {
    name: string;
    pretty?: string;
}

export interface AdmissionregistrationV1beta1ApiReadValidatingAdmissionPolicyBindingRequest {
    name: string;
    pretty?: string;
}

export interface AdmissionregistrationV1beta1ApiReadValidatingAdmissionPolicyStatusRequest {
    name: string;
    pretty?: string;
}

export interface AdmissionregistrationV1beta1ApiReplaceValidatingAdmissionPolicyRequest {
    name: string;
    body: V1beta1ValidatingAdmissionPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1beta1ApiReplaceValidatingAdmissionPolicyBindingRequest {
    name: string;
    body: V1beta1ValidatingAdmissionPolicyBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1beta1ApiReplaceValidatingAdmissionPolicyStatusRequest {
    name: string;
    body: V1beta1ValidatingAdmissionPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

/**
 * 
 */
export class AdmissionregistrationV1beta1Api extends runtime.BaseAPI {

    /**
     * create a ValidatingAdmissionPolicy
     */
    async createValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1beta1ApiCreateValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1beta1ValidatingAdmissionPolicyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * create a ValidatingAdmissionPolicy
     */
    async createValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1beta1ApiCreateValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicy> {
        const response = await this.createValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ValidatingAdmissionPolicyBinding
     */
    async createValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1beta1ApiCreateValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1beta1ValidatingAdmissionPolicyBindingToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * create a ValidatingAdmissionPolicyBinding
     */
    async createValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1beta1ApiCreateValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicyBinding> {
        const response = await this.createValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ValidatingAdmissionPolicy
     */
    async deleteCollectionValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1beta1ApiDeleteCollectionValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ValidatingAdmissionPolicy
     */
    async deleteCollectionValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1beta1ApiDeleteCollectionValidatingAdmissionPolicyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ValidatingAdmissionPolicyBinding
     */
    async deleteCollectionValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1beta1ApiDeleteCollectionValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ValidatingAdmissionPolicyBinding
     */
    async deleteCollectionValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1beta1ApiDeleteCollectionValidatingAdmissionPolicyBindingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ValidatingAdmissionPolicy
     */
    async deleteValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1beta1ApiDeleteValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ValidatingAdmissionPolicy
     */
    async deleteValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1beta1ApiDeleteValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ValidatingAdmissionPolicyBinding
     */
    async deleteValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1beta1ApiDeleteValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ValidatingAdmissionPolicyBinding
     */
    async deleteValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1beta1ApiDeleteValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicy
     */
    async listValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1beta1ApiListValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicy
     */
    async listValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1beta1ApiListValidatingAdmissionPolicyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicyList> {
        const response = await this.listValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicyBinding
     */
    async listValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1beta1ApiListValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicyBindingList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyBindingListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicyBinding
     */
    async listValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1beta1ApiListValidatingAdmissionPolicyBindingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicyBindingList> {
        const response = await this.listValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ValidatingAdmissionPolicy
     */
    async patchValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1beta1ApiPatchValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchValidatingAdmissionPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * partially update the specified ValidatingAdmissionPolicy
     */
    async patchValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1beta1ApiPatchValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicy> {
        const response = await this.patchValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ValidatingAdmissionPolicyBinding
     */
    async patchValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1beta1ApiPatchValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchValidatingAdmissionPolicyBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * partially update the specified ValidatingAdmissionPolicyBinding
     */
    async patchValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1beta1ApiPatchValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicyBinding> {
        const response = await this.patchValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified ValidatingAdmissionPolicy
     */
    async patchValidatingAdmissionPolicyStatusRaw(requestParameters: AdmissionregistrationV1beta1ApiPatchValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchValidatingAdmissionPolicyStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchValidatingAdmissionPolicyStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified ValidatingAdmissionPolicy
     */
    async patchValidatingAdmissionPolicyStatus(requestParameters: AdmissionregistrationV1beta1ApiPatchValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicy> {
        const response = await this.patchValidatingAdmissionPolicyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ValidatingAdmissionPolicy
     */
    async readValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1beta1ApiReadValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * read the specified ValidatingAdmissionPolicy
     */
    async readValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1beta1ApiReadValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicy> {
        const response = await this.readValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ValidatingAdmissionPolicyBinding
     */
    async readValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1beta1ApiReadValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * read the specified ValidatingAdmissionPolicyBinding
     */
    async readValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1beta1ApiReadValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicyBinding> {
        const response = await this.readValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified ValidatingAdmissionPolicy
     */
    async readValidatingAdmissionPolicyStatusRaw(requestParameters: AdmissionregistrationV1beta1ApiReadValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readValidatingAdmissionPolicyStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * read status of the specified ValidatingAdmissionPolicy
     */
    async readValidatingAdmissionPolicyStatus(requestParameters: AdmissionregistrationV1beta1ApiReadValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicy> {
        const response = await this.readValidatingAdmissionPolicyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ValidatingAdmissionPolicy
     */
    async replaceValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1beta1ApiReplaceValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceValidatingAdmissionPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1beta1ValidatingAdmissionPolicyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * replace the specified ValidatingAdmissionPolicy
     */
    async replaceValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1beta1ApiReplaceValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicy> {
        const response = await this.replaceValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ValidatingAdmissionPolicyBinding
     */
    async replaceValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1beta1ApiReplaceValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceValidatingAdmissionPolicyBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1beta1ValidatingAdmissionPolicyBindingToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * replace the specified ValidatingAdmissionPolicyBinding
     */
    async replaceValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1beta1ApiReplaceValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicyBinding> {
        const response = await this.replaceValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified ValidatingAdmissionPolicy
     */
    async replaceValidatingAdmissionPolicyStatusRaw(requestParameters: AdmissionregistrationV1beta1ApiReplaceValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceValidatingAdmissionPolicyStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceValidatingAdmissionPolicyStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1beta1ValidatingAdmissionPolicyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * replace status of the specified ValidatingAdmissionPolicy
     */
    async replaceValidatingAdmissionPolicyStatus(requestParameters: AdmissionregistrationV1beta1ApiReplaceValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1beta1ValidatingAdmissionPolicy> {
        const response = await this.replaceValidatingAdmissionPolicyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
