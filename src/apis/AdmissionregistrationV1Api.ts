/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1APIResourceList,
  V1DeleteOptions,
  V1MutatingWebhookConfiguration,
  V1MutatingWebhookConfigurationList,
  V1Status,
  V1ValidatingAdmissionPolicy,
  V1ValidatingAdmissionPolicyBinding,
  V1ValidatingAdmissionPolicyBindingList,
  V1ValidatingAdmissionPolicyList,
  V1ValidatingWebhookConfiguration,
  V1ValidatingWebhookConfigurationList,
} from '../models/index';
import {
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
    V1MutatingWebhookConfigurationFromJSON,
    V1MutatingWebhookConfigurationToJSON,
    V1MutatingWebhookConfigurationListFromJSON,
    V1MutatingWebhookConfigurationListToJSON,
    V1StatusFromJSON,
    V1StatusToJSON,
    V1ValidatingAdmissionPolicyFromJSON,
    V1ValidatingAdmissionPolicyToJSON,
    V1ValidatingAdmissionPolicyBindingFromJSON,
    V1ValidatingAdmissionPolicyBindingToJSON,
    V1ValidatingAdmissionPolicyBindingListFromJSON,
    V1ValidatingAdmissionPolicyBindingListToJSON,
    V1ValidatingAdmissionPolicyListFromJSON,
    V1ValidatingAdmissionPolicyListToJSON,
    V1ValidatingWebhookConfigurationFromJSON,
    V1ValidatingWebhookConfigurationToJSON,
    V1ValidatingWebhookConfigurationListFromJSON,
    V1ValidatingWebhookConfigurationListToJSON,
} from '../models/index';

export interface AdmissionregistrationV1ApiCreateMutatingWebhookConfigurationRequest {
    body: V1MutatingWebhookConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1ApiCreateValidatingAdmissionPolicyRequest {
    body: V1ValidatingAdmissionPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1ApiCreateValidatingAdmissionPolicyBindingRequest {
    body: V1ValidatingAdmissionPolicyBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1ApiCreateValidatingWebhookConfigurationRequest {
    body: V1ValidatingWebhookConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1ApiDeleteCollectionMutatingWebhookConfigurationRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1ApiDeleteCollectionValidatingAdmissionPolicyRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1ApiDeleteCollectionValidatingAdmissionPolicyBindingRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1ApiDeleteCollectionValidatingWebhookConfigurationRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1ApiDeleteMutatingWebhookConfigurationRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1ApiDeleteValidatingAdmissionPolicyRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1ApiDeleteValidatingAdmissionPolicyBindingRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1ApiDeleteValidatingWebhookConfigurationRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface AdmissionregistrationV1ApiListMutatingWebhookConfigurationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface AdmissionregistrationV1ApiListValidatingAdmissionPolicyRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface AdmissionregistrationV1ApiListValidatingAdmissionPolicyBindingRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface AdmissionregistrationV1ApiListValidatingWebhookConfigurationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface AdmissionregistrationV1ApiPatchMutatingWebhookConfigurationRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface AdmissionregistrationV1ApiPatchValidatingAdmissionPolicyRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface AdmissionregistrationV1ApiPatchValidatingAdmissionPolicyBindingRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface AdmissionregistrationV1ApiPatchValidatingAdmissionPolicyStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface AdmissionregistrationV1ApiPatchValidatingWebhookConfigurationRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface AdmissionregistrationV1ApiReadMutatingWebhookConfigurationRequest {
    name: string;
    pretty?: string;
}

export interface AdmissionregistrationV1ApiReadValidatingAdmissionPolicyRequest {
    name: string;
    pretty?: string;
}

export interface AdmissionregistrationV1ApiReadValidatingAdmissionPolicyBindingRequest {
    name: string;
    pretty?: string;
}

export interface AdmissionregistrationV1ApiReadValidatingAdmissionPolicyStatusRequest {
    name: string;
    pretty?: string;
}

export interface AdmissionregistrationV1ApiReadValidatingWebhookConfigurationRequest {
    name: string;
    pretty?: string;
}

export interface AdmissionregistrationV1ApiReplaceMutatingWebhookConfigurationRequest {
    name: string;
    body: V1MutatingWebhookConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1ApiReplaceValidatingAdmissionPolicyRequest {
    name: string;
    body: V1ValidatingAdmissionPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1ApiReplaceValidatingAdmissionPolicyBindingRequest {
    name: string;
    body: V1ValidatingAdmissionPolicyBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1ApiReplaceValidatingAdmissionPolicyStatusRequest {
    name: string;
    body: V1ValidatingAdmissionPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface AdmissionregistrationV1ApiReplaceValidatingWebhookConfigurationRequest {
    name: string;
    body: V1ValidatingWebhookConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

/**
 * 
 */
export class AdmissionregistrationV1Api extends runtime.BaseAPI {

    /**
     * create a MutatingWebhookConfiguration
     */
    async createMutatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiCreateMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1MutatingWebhookConfiguration>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createMutatingWebhookConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1MutatingWebhookConfigurationToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1MutatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * create a MutatingWebhookConfiguration
     */
    async createMutatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiCreateMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1MutatingWebhookConfiguration> {
        const response = await this.createMutatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ValidatingAdmissionPolicy
     */
    async createValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1ApiCreateValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicy>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createValidatingAdmissionPolicy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ValidatingAdmissionPolicyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * create a ValidatingAdmissionPolicy
     */
    async createValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1ApiCreateValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicy> {
        const response = await this.createValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ValidatingAdmissionPolicyBinding
     */
    async createValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1ApiCreateValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createValidatingAdmissionPolicyBinding().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicybindings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ValidatingAdmissionPolicyBindingToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * create a ValidatingAdmissionPolicyBinding
     */
    async createValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1ApiCreateValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicyBinding> {
        const response = await this.createValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ValidatingWebhookConfiguration
     */
    async createValidatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiCreateValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingWebhookConfiguration>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createValidatingWebhookConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ValidatingWebhookConfigurationToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * create a ValidatingWebhookConfiguration
     */
    async createValidatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiCreateValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingWebhookConfiguration> {
        const response = await this.createValidatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of MutatingWebhookConfiguration
     */
    async deleteCollectionMutatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiDeleteCollectionMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of MutatingWebhookConfiguration
     */
    async deleteCollectionMutatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiDeleteCollectionMutatingWebhookConfigurationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionMutatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ValidatingAdmissionPolicy
     */
    async deleteCollectionValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1ApiDeleteCollectionValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ValidatingAdmissionPolicy
     */
    async deleteCollectionValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1ApiDeleteCollectionValidatingAdmissionPolicyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ValidatingAdmissionPolicyBinding
     */
    async deleteCollectionValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1ApiDeleteCollectionValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicybindings`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ValidatingAdmissionPolicyBinding
     */
    async deleteCollectionValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1ApiDeleteCollectionValidatingAdmissionPolicyBindingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ValidatingWebhookConfiguration
     */
    async deleteCollectionValidatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiDeleteCollectionValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ValidatingWebhookConfiguration
     */
    async deleteCollectionValidatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiDeleteCollectionValidatingWebhookConfigurationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionValidatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a MutatingWebhookConfiguration
     */
    async deleteMutatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiDeleteMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteMutatingWebhookConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a MutatingWebhookConfiguration
     */
    async deleteMutatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiDeleteMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteMutatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ValidatingAdmissionPolicy
     */
    async deleteValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1ApiDeleteValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteValidatingAdmissionPolicy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ValidatingAdmissionPolicy
     */
    async deleteValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1ApiDeleteValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ValidatingAdmissionPolicyBinding
     */
    async deleteValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1ApiDeleteValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteValidatingAdmissionPolicyBinding().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ValidatingAdmissionPolicyBinding
     */
    async deleteValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1ApiDeleteValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ValidatingWebhookConfiguration
     */
    async deleteValidatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiDeleteValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteValidatingWebhookConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ValidatingWebhookConfiguration
     */
    async deleteValidatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiDeleteValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteValidatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind MutatingWebhookConfiguration
     */
    async listMutatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiListMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1MutatingWebhookConfigurationList>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1MutatingWebhookConfigurationListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind MutatingWebhookConfiguration
     */
    async listMutatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiListMutatingWebhookConfigurationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1MutatingWebhookConfigurationList> {
        const response = await this.listMutatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicy
     */
    async listValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1ApiListValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicy
     */
    async listValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1ApiListValidatingAdmissionPolicyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicyList> {
        const response = await this.listValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicyBinding
     */
    async listValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1ApiListValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicyBindingList>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicybindings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyBindingListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicyBinding
     */
    async listValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1ApiListValidatingAdmissionPolicyBindingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicyBindingList> {
        const response = await this.listValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ValidatingWebhookConfiguration
     */
    async listValidatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiListValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingWebhookConfigurationList>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingWebhookConfigurationListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ValidatingWebhookConfiguration
     */
    async listValidatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiListValidatingWebhookConfigurationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingWebhookConfigurationList> {
        const response = await this.listValidatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified MutatingWebhookConfiguration
     */
    async patchMutatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiPatchMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1MutatingWebhookConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchMutatingWebhookConfiguration().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchMutatingWebhookConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1MutatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update the specified MutatingWebhookConfiguration
     */
    async patchMutatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiPatchMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1MutatingWebhookConfiguration> {
        const response = await this.patchMutatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ValidatingAdmissionPolicy
     */
    async patchValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1ApiPatchValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicy>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchValidatingAdmissionPolicy().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchValidatingAdmissionPolicy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * partially update the specified ValidatingAdmissionPolicy
     */
    async patchValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1ApiPatchValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicy> {
        const response = await this.patchValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ValidatingAdmissionPolicyBinding
     */
    async patchValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1ApiPatchValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchValidatingAdmissionPolicyBinding().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchValidatingAdmissionPolicyBinding().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * partially update the specified ValidatingAdmissionPolicyBinding
     */
    async patchValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1ApiPatchValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicyBinding> {
        const response = await this.patchValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified ValidatingAdmissionPolicy
     */
    async patchValidatingAdmissionPolicyStatusRaw(requestParameters: AdmissionregistrationV1ApiPatchValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicy>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchValidatingAdmissionPolicyStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchValidatingAdmissionPolicyStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified ValidatingAdmissionPolicy
     */
    async patchValidatingAdmissionPolicyStatus(requestParameters: AdmissionregistrationV1ApiPatchValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicy> {
        const response = await this.patchValidatingAdmissionPolicyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ValidatingWebhookConfiguration
     */
    async patchValidatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiPatchValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingWebhookConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchValidatingWebhookConfiguration().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchValidatingWebhookConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update the specified ValidatingWebhookConfiguration
     */
    async patchValidatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiPatchValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingWebhookConfiguration> {
        const response = await this.patchValidatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified MutatingWebhookConfiguration
     */
    async readMutatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiReadMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1MutatingWebhookConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readMutatingWebhookConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1MutatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * read the specified MutatingWebhookConfiguration
     */
    async readMutatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiReadMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1MutatingWebhookConfiguration> {
        const response = await this.readMutatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ValidatingAdmissionPolicy
     */
    async readValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1ApiReadValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicy>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readValidatingAdmissionPolicy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * read the specified ValidatingAdmissionPolicy
     */
    async readValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1ApiReadValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicy> {
        const response = await this.readValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ValidatingAdmissionPolicyBinding
     */
    async readValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1ApiReadValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readValidatingAdmissionPolicyBinding().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * read the specified ValidatingAdmissionPolicyBinding
     */
    async readValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1ApiReadValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicyBinding> {
        const response = await this.readValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified ValidatingAdmissionPolicy
     */
    async readValidatingAdmissionPolicyStatusRaw(requestParameters: AdmissionregistrationV1ApiReadValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicy>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readValidatingAdmissionPolicyStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * read status of the specified ValidatingAdmissionPolicy
     */
    async readValidatingAdmissionPolicyStatus(requestParameters: AdmissionregistrationV1ApiReadValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicy> {
        const response = await this.readValidatingAdmissionPolicyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ValidatingWebhookConfiguration
     */
    async readValidatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiReadValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingWebhookConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readValidatingWebhookConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * read the specified ValidatingWebhookConfiguration
     */
    async readValidatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiReadValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingWebhookConfiguration> {
        const response = await this.readValidatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified MutatingWebhookConfiguration
     */
    async replaceMutatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiReplaceMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1MutatingWebhookConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceMutatingWebhookConfiguration().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceMutatingWebhookConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1MutatingWebhookConfigurationToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1MutatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * replace the specified MutatingWebhookConfiguration
     */
    async replaceMutatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiReplaceMutatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1MutatingWebhookConfiguration> {
        const response = await this.replaceMutatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ValidatingAdmissionPolicy
     */
    async replaceValidatingAdmissionPolicyRaw(requestParameters: AdmissionregistrationV1ApiReplaceValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicy>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceValidatingAdmissionPolicy().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceValidatingAdmissionPolicy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1ValidatingAdmissionPolicyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * replace the specified ValidatingAdmissionPolicy
     */
    async replaceValidatingAdmissionPolicy(requestParameters: AdmissionregistrationV1ApiReplaceValidatingAdmissionPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicy> {
        const response = await this.replaceValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ValidatingAdmissionPolicyBinding
     */
    async replaceValidatingAdmissionPolicyBindingRaw(requestParameters: AdmissionregistrationV1ApiReplaceValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceValidatingAdmissionPolicyBinding().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceValidatingAdmissionPolicyBinding().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1ValidatingAdmissionPolicyBindingToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * replace the specified ValidatingAdmissionPolicyBinding
     */
    async replaceValidatingAdmissionPolicyBinding(requestParameters: AdmissionregistrationV1ApiReplaceValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicyBinding> {
        const response = await this.replaceValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified ValidatingAdmissionPolicy
     */
    async replaceValidatingAdmissionPolicyStatusRaw(requestParameters: AdmissionregistrationV1ApiReplaceValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingAdmissionPolicy>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceValidatingAdmissionPolicyStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceValidatingAdmissionPolicyStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1ValidatingAdmissionPolicyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * replace status of the specified ValidatingAdmissionPolicy
     */
    async replaceValidatingAdmissionPolicyStatus(requestParameters: AdmissionregistrationV1ApiReplaceValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingAdmissionPolicy> {
        const response = await this.replaceValidatingAdmissionPolicyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ValidatingWebhookConfiguration
     */
    async replaceValidatingWebhookConfigurationRaw(requestParameters: AdmissionregistrationV1ApiReplaceValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ValidatingWebhookConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceValidatingWebhookConfiguration().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceValidatingWebhookConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1ValidatingWebhookConfigurationToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ValidatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * replace the specified ValidatingWebhookConfiguration
     */
    async replaceValidatingWebhookConfiguration(requestParameters: AdmissionregistrationV1ApiReplaceValidatingWebhookConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ValidatingWebhookConfiguration> {
        const response = await this.replaceValidatingWebhookConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
