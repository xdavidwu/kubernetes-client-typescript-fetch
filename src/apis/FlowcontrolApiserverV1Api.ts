/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1APIResourceList,
  V1DeleteOptions,
  V1FlowSchema,
  V1FlowSchemaList,
  V1PriorityLevelConfiguration,
  V1PriorityLevelConfigurationList,
  V1Status,
} from '../models/index';
import {
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
    V1FlowSchemaFromJSON,
    V1FlowSchemaToJSON,
    V1FlowSchemaListFromJSON,
    V1FlowSchemaListToJSON,
    V1PriorityLevelConfigurationFromJSON,
    V1PriorityLevelConfigurationToJSON,
    V1PriorityLevelConfigurationListFromJSON,
    V1PriorityLevelConfigurationListToJSON,
    V1StatusFromJSON,
    V1StatusToJSON,
} from '../models/index';

export interface FlowcontrolApiserverV1ApiCreateFlowSchemaRequest {
    body: V1FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface FlowcontrolApiserverV1ApiCreatePriorityLevelConfigurationRequest {
    body: V1PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface FlowcontrolApiserverV1ApiDeleteCollectionFlowSchemaRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface FlowcontrolApiserverV1ApiDeleteCollectionPriorityLevelConfigurationRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface FlowcontrolApiserverV1ApiDeleteFlowSchemaRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface FlowcontrolApiserverV1ApiDeletePriorityLevelConfigurationRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface FlowcontrolApiserverV1ApiListFlowSchemaRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface FlowcontrolApiserverV1ApiListPriorityLevelConfigurationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface FlowcontrolApiserverV1ApiPatchFlowSchemaRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface FlowcontrolApiserverV1ApiPatchFlowSchemaStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface FlowcontrolApiserverV1ApiPatchPriorityLevelConfigurationRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface FlowcontrolApiserverV1ApiPatchPriorityLevelConfigurationStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface FlowcontrolApiserverV1ApiReadFlowSchemaRequest {
    name: string;
    pretty?: string;
}

export interface FlowcontrolApiserverV1ApiReadFlowSchemaStatusRequest {
    name: string;
    pretty?: string;
}

export interface FlowcontrolApiserverV1ApiReadPriorityLevelConfigurationRequest {
    name: string;
    pretty?: string;
}

export interface FlowcontrolApiserverV1ApiReadPriorityLevelConfigurationStatusRequest {
    name: string;
    pretty?: string;
}

export interface FlowcontrolApiserverV1ApiReplaceFlowSchemaRequest {
    name: string;
    body: V1FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface FlowcontrolApiserverV1ApiReplaceFlowSchemaStatusRequest {
    name: string;
    body: V1FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface FlowcontrolApiserverV1ApiReplacePriorityLevelConfigurationRequest {
    name: string;
    body: V1PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface FlowcontrolApiserverV1ApiReplacePriorityLevelConfigurationStatusRequest {
    name: string;
    body: V1PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

/**
 * 
 */
export class FlowcontrolApiserverV1Api extends runtime.BaseAPI {

    /**
     * create a FlowSchema
     */
    async createFlowSchemaRaw(requestParameters: FlowcontrolApiserverV1ApiCreateFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1FlowSchema>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createFlowSchema().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1FlowSchemaToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * create a FlowSchema
     */
    async createFlowSchema(requestParameters: FlowcontrolApiserverV1ApiCreateFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1FlowSchema> {
        const response = await this.createFlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a PriorityLevelConfiguration
     */
    async createPriorityLevelConfigurationRaw(requestParameters: FlowcontrolApiserverV1ApiCreatePriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PriorityLevelConfiguration>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createPriorityLevelConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1PriorityLevelConfigurationToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * create a PriorityLevelConfiguration
     */
    async createPriorityLevelConfiguration(requestParameters: FlowcontrolApiserverV1ApiCreatePriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PriorityLevelConfiguration> {
        const response = await this.createPriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of FlowSchema
     */
    async deleteCollectionFlowSchemaRaw(requestParameters: FlowcontrolApiserverV1ApiDeleteCollectionFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of FlowSchema
     */
    async deleteCollectionFlowSchema(requestParameters: FlowcontrolApiserverV1ApiDeleteCollectionFlowSchemaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionFlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of PriorityLevelConfiguration
     */
    async deleteCollectionPriorityLevelConfigurationRaw(requestParameters: FlowcontrolApiserverV1ApiDeleteCollectionPriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of PriorityLevelConfiguration
     */
    async deleteCollectionPriorityLevelConfiguration(requestParameters: FlowcontrolApiserverV1ApiDeleteCollectionPriorityLevelConfigurationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteCollectionPriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a FlowSchema
     */
    async deleteFlowSchemaRaw(requestParameters: FlowcontrolApiserverV1ApiDeleteFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteFlowSchema().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a FlowSchema
     */
    async deleteFlowSchema(requestParameters: FlowcontrolApiserverV1ApiDeleteFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deleteFlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a PriorityLevelConfiguration
     */
    async deletePriorityLevelConfigurationRaw(requestParameters: FlowcontrolApiserverV1ApiDeletePriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deletePriorityLevelConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['gracePeriodSeconds'] != null) {
            queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
        }

        if (requestParameters['orphanDependents'] != null) {
            queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
        }

        if (requestParameters['propagationPolicy'] != null) {
            queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a PriorityLevelConfiguration
     */
    async deletePriorityLevelConfiguration(requestParameters: FlowcontrolApiserverV1ApiDeletePriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Status> {
        const response = await this.deletePriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind FlowSchema
     */
    async listFlowSchemaRaw(requestParameters: FlowcontrolApiserverV1ApiListFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1FlowSchemaList>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1FlowSchemaListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind FlowSchema
     */
    async listFlowSchema(requestParameters: FlowcontrolApiserverV1ApiListFlowSchemaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1FlowSchemaList> {
        const response = await this.listFlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind PriorityLevelConfiguration
     */
    async listPriorityLevelConfigurationRaw(requestParameters: FlowcontrolApiserverV1ApiListPriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PriorityLevelConfigurationList>> {
        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['allowWatchBookmarks'] != null) {
            queryParameters['allowWatchBookmarks'] = requestParameters['allowWatchBookmarks'];
        }

        if (requestParameters['_continue'] != null) {
            queryParameters['continue'] = requestParameters['_continue'];
        }

        if (requestParameters['fieldSelector'] != null) {
            queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
        }

        if (requestParameters['labelSelector'] != null) {
            queryParameters['labelSelector'] = requestParameters['labelSelector'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['resourceVersion'] != null) {
            queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
        }

        if (requestParameters['resourceVersionMatch'] != null) {
            queryParameters['resourceVersionMatch'] = requestParameters['resourceVersionMatch'];
        }

        if (requestParameters['sendInitialEvents'] != null) {
            queryParameters['sendInitialEvents'] = requestParameters['sendInitialEvents'];
        }

        if (requestParameters['timeoutSeconds'] != null) {
            queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
        }

        if (requestParameters['watch'] != null) {
            queryParameters['watch'] = requestParameters['watch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PriorityLevelConfigurationListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PriorityLevelConfiguration
     */
    async listPriorityLevelConfiguration(requestParameters: FlowcontrolApiserverV1ApiListPriorityLevelConfigurationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PriorityLevelConfigurationList> {
        const response = await this.listPriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified FlowSchema
     */
    async patchFlowSchemaRaw(requestParameters: FlowcontrolApiserverV1ApiPatchFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1FlowSchema>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchFlowSchema().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchFlowSchema().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * partially update the specified FlowSchema
     */
    async patchFlowSchema(requestParameters: FlowcontrolApiserverV1ApiPatchFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1FlowSchema> {
        const response = await this.patchFlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified FlowSchema
     */
    async patchFlowSchemaStatusRaw(requestParameters: FlowcontrolApiserverV1ApiPatchFlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1FlowSchema>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchFlowSchemaStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchFlowSchemaStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified FlowSchema
     */
    async patchFlowSchemaStatus(requestParameters: FlowcontrolApiserverV1ApiPatchFlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1FlowSchema> {
        const response = await this.patchFlowSchemaStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified PriorityLevelConfiguration
     */
    async patchPriorityLevelConfigurationRaw(requestParameters: FlowcontrolApiserverV1ApiPatchPriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PriorityLevelConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchPriorityLevelConfiguration().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchPriorityLevelConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update the specified PriorityLevelConfiguration
     */
    async patchPriorityLevelConfiguration(requestParameters: FlowcontrolApiserverV1ApiPatchPriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PriorityLevelConfiguration> {
        const response = await this.patchPriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified PriorityLevelConfiguration
     */
    async patchPriorityLevelConfigurationStatusRaw(requestParameters: FlowcontrolApiserverV1ApiPatchPriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PriorityLevelConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchPriorityLevelConfigurationStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchPriorityLevelConfigurationStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified PriorityLevelConfiguration
     */
    async patchPriorityLevelConfigurationStatus(requestParameters: FlowcontrolApiserverV1ApiPatchPriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PriorityLevelConfiguration> {
        const response = await this.patchPriorityLevelConfigurationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified FlowSchema
     */
    async readFlowSchemaRaw(requestParameters: FlowcontrolApiserverV1ApiReadFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1FlowSchema>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readFlowSchema().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * read the specified FlowSchema
     */
    async readFlowSchema(requestParameters: FlowcontrolApiserverV1ApiReadFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1FlowSchema> {
        const response = await this.readFlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified FlowSchema
     */
    async readFlowSchemaStatusRaw(requestParameters: FlowcontrolApiserverV1ApiReadFlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1FlowSchema>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readFlowSchemaStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * read status of the specified FlowSchema
     */
    async readFlowSchemaStatus(requestParameters: FlowcontrolApiserverV1ApiReadFlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1FlowSchema> {
        const response = await this.readFlowSchemaStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified PriorityLevelConfiguration
     */
    async readPriorityLevelConfigurationRaw(requestParameters: FlowcontrolApiserverV1ApiReadPriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PriorityLevelConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readPriorityLevelConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * read the specified PriorityLevelConfiguration
     */
    async readPriorityLevelConfiguration(requestParameters: FlowcontrolApiserverV1ApiReadPriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PriorityLevelConfiguration> {
        const response = await this.readPriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified PriorityLevelConfiguration
     */
    async readPriorityLevelConfigurationStatusRaw(requestParameters: FlowcontrolApiserverV1ApiReadPriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PriorityLevelConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readPriorityLevelConfigurationStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * read status of the specified PriorityLevelConfiguration
     */
    async readPriorityLevelConfigurationStatus(requestParameters: FlowcontrolApiserverV1ApiReadPriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PriorityLevelConfiguration> {
        const response = await this.readPriorityLevelConfigurationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified FlowSchema
     */
    async replaceFlowSchemaRaw(requestParameters: FlowcontrolApiserverV1ApiReplaceFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1FlowSchema>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceFlowSchema().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceFlowSchema().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1FlowSchemaToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * replace the specified FlowSchema
     */
    async replaceFlowSchema(requestParameters: FlowcontrolApiserverV1ApiReplaceFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1FlowSchema> {
        const response = await this.replaceFlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified FlowSchema
     */
    async replaceFlowSchemaStatusRaw(requestParameters: FlowcontrolApiserverV1ApiReplaceFlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1FlowSchema>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replaceFlowSchemaStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replaceFlowSchemaStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1FlowSchemaToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * replace status of the specified FlowSchema
     */
    async replaceFlowSchemaStatus(requestParameters: FlowcontrolApiserverV1ApiReplaceFlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1FlowSchema> {
        const response = await this.replaceFlowSchemaStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified PriorityLevelConfiguration
     */
    async replacePriorityLevelConfigurationRaw(requestParameters: FlowcontrolApiserverV1ApiReplacePriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PriorityLevelConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replacePriorityLevelConfiguration().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replacePriorityLevelConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1PriorityLevelConfigurationToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * replace the specified PriorityLevelConfiguration
     */
    async replacePriorityLevelConfiguration(requestParameters: FlowcontrolApiserverV1ApiReplacePriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PriorityLevelConfiguration> {
        const response = await this.replacePriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified PriorityLevelConfiguration
     */
    async replacePriorityLevelConfigurationStatusRaw(requestParameters: FlowcontrolApiserverV1ApiReplacePriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PriorityLevelConfiguration>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replacePriorityLevelConfigurationStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replacePriorityLevelConfigurationStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pretty'] != null) {
            queryParameters['pretty'] = requestParameters['pretty'];
        }

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldManager'] != null) {
            queryParameters['fieldManager'] = requestParameters['fieldManager'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1PriorityLevelConfigurationToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * replace status of the specified PriorityLevelConfiguration
     */
    async replacePriorityLevelConfigurationStatus(requestParameters: FlowcontrolApiserverV1ApiReplacePriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PriorityLevelConfiguration> {
        const response = await this.replacePriorityLevelConfigurationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
