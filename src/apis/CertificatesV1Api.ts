/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    V1APIResourceList,
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1CertificateSigningRequest,
    V1CertificateSigningRequestFromJSON,
    V1CertificateSigningRequestToJSON,
    V1CertificateSigningRequestList,
    V1CertificateSigningRequestListFromJSON,
    V1CertificateSigningRequestListToJSON,
    V1DeleteOptions,
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
    V1Status,
    V1StatusFromJSON,
    V1StatusToJSON,
} from '../models';

export interface CertificatesV1ApiCreateCertificateSigningRequestRequest {
    body: V1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface CertificatesV1ApiDeleteCertificateSigningRequestRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface CertificatesV1ApiDeleteCollectionCertificateSigningRequestRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface CertificatesV1ApiListCertificateSigningRequestRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface CertificatesV1ApiPatchCertificateSigningRequestRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface CertificatesV1ApiPatchCertificateSigningRequestApprovalRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface CertificatesV1ApiPatchCertificateSigningRequestStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface CertificatesV1ApiReadCertificateSigningRequestRequest {
    name: string;
    pretty?: string;
}

export interface CertificatesV1ApiReadCertificateSigningRequestApprovalRequest {
    name: string;
    pretty?: string;
}

export interface CertificatesV1ApiReadCertificateSigningRequestStatusRequest {
    name: string;
    pretty?: string;
}

export interface CertificatesV1ApiReplaceCertificateSigningRequestRequest {
    name: string;
    body: V1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface CertificatesV1ApiReplaceCertificateSigningRequestApprovalRequest {
    name: string;
    body: V1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface CertificatesV1ApiReplaceCertificateSigningRequestStatusRequest {
    name: string;
    body: V1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

/**
 * 
 */
export class CertificatesV1Api extends runtime.BaseAPI {

    /**
     * create a CertificateSigningRequest
     */
    async createCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiCreateCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CertificateSigningRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * create a CertificateSigningRequest
     */
    async createCertificateSigningRequest(requestParameters: CertificatesV1ApiCreateCertificateSigningRequestRequest): Promise<V1CertificateSigningRequest> {
        const response = await this.createCertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a CertificateSigningRequest
     */
    async deleteCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiDeleteCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a CertificateSigningRequest
     */
    async deleteCertificateSigningRequest(requestParameters: CertificatesV1ApiDeleteCertificateSigningRequestRequest): Promise<V1Status> {
        const response = await this.deleteCertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of CertificateSigningRequest
     */
    async deleteCollectionCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiDeleteCollectionCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of CertificateSigningRequest
     */
    async deleteCollectionCertificateSigningRequest(requestParameters: CertificatesV1ApiDeleteCollectionCertificateSigningRequestRequest): Promise<V1Status> {
        const response = await this.deleteCollectionCertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind CertificateSigningRequest
     */
    async listCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiListCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequestList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CertificateSigningRequest
     */
    async listCertificateSigningRequest(requestParameters: CertificatesV1ApiListCertificateSigningRequestRequest): Promise<V1CertificateSigningRequestList> {
        const response = await this.listCertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified CertificateSigningRequest
     */
    async patchCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCertificateSigningRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * partially update the specified CertificateSigningRequest
     */
    async patchCertificateSigningRequest(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestRequest): Promise<V1CertificateSigningRequest> {
        const response = await this.patchCertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update approval of the specified CertificateSigningRequest
     */
    async patchCertificateSigningRequestApprovalRaw(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestApprovalRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCertificateSigningRequestApproval.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCertificateSigningRequestApproval.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * partially update approval of the specified CertificateSigningRequest
     */
    async patchCertificateSigningRequestApproval(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestApprovalRequest): Promise<V1CertificateSigningRequest> {
        const response = await this.patchCertificateSigningRequestApprovalRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified CertificateSigningRequest
     */
    async patchCertificateSigningRequestStatusRaw(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestStatusRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCertificateSigningRequestStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCertificateSigningRequestStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified CertificateSigningRequest
     */
    async patchCertificateSigningRequestStatus(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestStatusRequest): Promise<V1CertificateSigningRequest> {
        const response = await this.patchCertificateSigningRequestStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified CertificateSigningRequest
     */
    async readCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiReadCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * read the specified CertificateSigningRequest
     */
    async readCertificateSigningRequest(requestParameters: CertificatesV1ApiReadCertificateSigningRequestRequest): Promise<V1CertificateSigningRequest> {
        const response = await this.readCertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * read approval of the specified CertificateSigningRequest
     */
    async readCertificateSigningRequestApprovalRaw(requestParameters: CertificatesV1ApiReadCertificateSigningRequestApprovalRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCertificateSigningRequestApproval.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * read approval of the specified CertificateSigningRequest
     */
    async readCertificateSigningRequestApproval(requestParameters: CertificatesV1ApiReadCertificateSigningRequestApprovalRequest): Promise<V1CertificateSigningRequest> {
        const response = await this.readCertificateSigningRequestApprovalRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified CertificateSigningRequest
     */
    async readCertificateSigningRequestStatusRaw(requestParameters: CertificatesV1ApiReadCertificateSigningRequestStatusRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCertificateSigningRequestStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * read status of the specified CertificateSigningRequest
     */
    async readCertificateSigningRequestStatus(requestParameters: CertificatesV1ApiReadCertificateSigningRequestStatusRequest): Promise<V1CertificateSigningRequest> {
        const response = await this.readCertificateSigningRequestStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified CertificateSigningRequest
     */
    async replaceCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCertificateSigningRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CertificateSigningRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * replace the specified CertificateSigningRequest
     */
    async replaceCertificateSigningRequest(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestRequest): Promise<V1CertificateSigningRequest> {
        const response = await this.replaceCertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace approval of the specified CertificateSigningRequest
     */
    async replaceCertificateSigningRequestApprovalRaw(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestApprovalRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCertificateSigningRequestApproval.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCertificateSigningRequestApproval.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CertificateSigningRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * replace approval of the specified CertificateSigningRequest
     */
    async replaceCertificateSigningRequestApproval(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestApprovalRequest): Promise<V1CertificateSigningRequest> {
        const response = await this.replaceCertificateSigningRequestApprovalRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified CertificateSigningRequest
     */
    async replaceCertificateSigningRequestStatusRaw(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestStatusRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCertificateSigningRequestStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCertificateSigningRequestStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CertificateSigningRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * replace status of the specified CertificateSigningRequest
     */
    async replaceCertificateSigningRequestStatus(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestStatusRequest): Promise<V1CertificateSigningRequest> {
        const response = await this.replaceCertificateSigningRequestStatusRaw(requestParameters);
        return await response.value();
    }

}
