/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.28.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1NodeSelector } from './V1NodeSelector';
import {
    V1NodeSelectorFromJSON,
    V1NodeSelectorFromJSONTyped,
    V1NodeSelectorToJSON,
} from './V1NodeSelector';
import type { V1alpha2ResourceHandle } from './V1alpha2ResourceHandle';
import {
    V1alpha2ResourceHandleFromJSON,
    V1alpha2ResourceHandleFromJSONTyped,
    V1alpha2ResourceHandleToJSON,
} from './V1alpha2ResourceHandle';

/**
 * AllocationResult contains attributes of an allocated resource.
 * @export
 * @interface V1alpha2AllocationResult
 */
export interface V1alpha2AllocationResult {
    /**
     * 
     * @type {V1NodeSelector}
     * @memberof V1alpha2AllocationResult
     */
    availableOnNodes?: V1NodeSelector;
    /**
     * ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
     * 
     * Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
     * @type {Array<V1alpha2ResourceHandle>}
     * @memberof V1alpha2AllocationResult
     */
    resourceHandles?: Array<V1alpha2ResourceHandle>;
    /**
     * Shareable determines whether the resource supports more than one consumer at a time.
     * @type {boolean}
     * @memberof V1alpha2AllocationResult
     */
    shareable?: boolean;
}

/**
 * Check if a given object implements the V1alpha2AllocationResult interface.
 */
export function instanceOfV1alpha2AllocationResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1alpha2AllocationResultFromJSON(json: any): V1alpha2AllocationResult {
    return V1alpha2AllocationResultFromJSONTyped(json, false);
}

export function V1alpha2AllocationResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1alpha2AllocationResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'availableOnNodes': !exists(json, 'availableOnNodes') ? undefined : V1NodeSelectorFromJSON(json['availableOnNodes']),
        'resourceHandles': !exists(json, 'resourceHandles') ? undefined : ((json['resourceHandles'] as Array<any>).map(V1alpha2ResourceHandleFromJSON)),
        'shareable': !exists(json, 'shareable') ? undefined : json['shareable'],
    };
}

export function V1alpha2AllocationResultToJSON(value?: V1alpha2AllocationResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'availableOnNodes': V1NodeSelectorToJSON(value.availableOnNodes),
        'resourceHandles': value.resourceHandles === undefined ? undefined : ((value.resourceHandles as Array<any>).map(V1alpha2ResourceHandleToJSON)),
        'shareable': value.shareable,
    };
}

