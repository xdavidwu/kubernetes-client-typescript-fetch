/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Info contains versioning information. how we'll want to distribute that information.
 * @export
 * @interface VersionInfo
 */
export interface VersionInfo {
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    buildDate: string;
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    compiler: string;
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    gitCommit: string;
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    gitTreeState: string;
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    gitVersion: string;
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    goVersion: string;
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    major: string;
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    minor: string;
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    platform: string;
}

/**
 * Check if a given object implements the VersionInfo interface.
 */
export function instanceOfVersionInfo(value: object): value is VersionInfo {
    if (!('buildDate' in value) || value['buildDate'] === undefined) return false;
    if (!('compiler' in value) || value['compiler'] === undefined) return false;
    if (!('gitCommit' in value) || value['gitCommit'] === undefined) return false;
    if (!('gitTreeState' in value) || value['gitTreeState'] === undefined) return false;
    if (!('gitVersion' in value) || value['gitVersion'] === undefined) return false;
    if (!('goVersion' in value) || value['goVersion'] === undefined) return false;
    if (!('major' in value) || value['major'] === undefined) return false;
    if (!('minor' in value) || value['minor'] === undefined) return false;
    if (!('platform' in value) || value['platform'] === undefined) return false;
    return true;
}

export function VersionInfoFromJSON(json: any): VersionInfo {
    return VersionInfoFromJSONTyped(json, false);
}

export function VersionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): VersionInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'buildDate': json['buildDate'],
        'compiler': json['compiler'],
        'gitCommit': json['gitCommit'],
        'gitTreeState': json['gitTreeState'],
        'gitVersion': json['gitVersion'],
        'goVersion': json['goVersion'],
        'major': json['major'],
        'minor': json['minor'],
        'platform': json['platform'],
    };
}

export function VersionInfoToJSON(value?: VersionInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'buildDate': value['buildDate'],
        'compiler': value['compiler'],
        'gitCommit': value['gitCommit'],
        'gitTreeState': value['gitTreeState'],
        'gitVersion': value['gitVersion'],
        'goVersion': value['goVersion'],
        'major': value['major'],
        'minor': value['minor'],
        'platform': value['platform'],
    };
}

