/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * ExpressionWarning is a warning information that targets a specific expression.
 * @export
 * @interface V1beta1ExpressionWarning
 */
export interface V1beta1ExpressionWarning {
    /**
     * The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is "spec.validations[0].expression"
     * @type {string}
     * @memberof V1beta1ExpressionWarning
     */
    fieldRef: string;
    /**
     * The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.
     * @type {string}
     * @memberof V1beta1ExpressionWarning
     */
    warning: string;
}

/**
 * Check if a given object implements the V1beta1ExpressionWarning interface.
 */
export function instanceOfV1beta1ExpressionWarning(value: object): value is V1beta1ExpressionWarning {
    if (!('fieldRef' in value) || value['fieldRef'] === undefined) return false;
    if (!('warning' in value) || value['warning'] === undefined) return false;
    return true;
}

export function V1beta1ExpressionWarningFromJSON(json: any): V1beta1ExpressionWarning {
    return V1beta1ExpressionWarningFromJSONTyped(json, false);
}

export function V1beta1ExpressionWarningFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1ExpressionWarning {
    if (json == null) {
        return json;
    }
    return {
        
        'fieldRef': json['fieldRef'],
        'warning': json['warning'],
    };
}

export function V1beta1ExpressionWarningToJSON(value?: V1beta1ExpressionWarning | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'fieldRef': value['fieldRef'],
        'warning': value['warning'],
    };
}

