/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1ObjectMeta } from './V1ObjectMeta';
import {
    V1ObjectMetaFromJSON,
    V1ObjectMetaFromJSONTyped,
    V1ObjectMetaToJSON,
} from './V1ObjectMeta';
import type { V1TopologySelectorTerm } from './V1TopologySelectorTerm';
import {
    V1TopologySelectorTermFromJSON,
    V1TopologySelectorTermFromJSONTyped,
    V1TopologySelectorTermToJSON,
} from './V1TopologySelectorTerm';

/**
 * StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
 * 
 * StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
 * @export
 * @interface V1StorageClass
 */
export interface V1StorageClass {
    /**
     * allowVolumeExpansion shows whether the storage class allow volume expand.
     * @type {boolean}
     * @memberof V1StorageClass
     */
    allowVolumeExpansion?: boolean;
    /**
     * allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
     * @type {Array<V1TopologySelectorTerm>}
     * @memberof V1StorageClass
     */
    allowedTopologies?: Array<V1TopologySelectorTerm>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof V1StorageClass
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof V1StorageClass
     */
    kind?: string;
    /**
     * 
     * @type {V1ObjectMeta}
     * @memberof V1StorageClass
     */
    metadata?: V1ObjectMeta;
    /**
     * mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
     * @type {Array<string>}
     * @memberof V1StorageClass
     */
    mountOptions?: Array<string>;
    /**
     * parameters holds the parameters for the provisioner that should create volumes of this storage class.
     * @type {{ [key: string]: string; }}
     * @memberof V1StorageClass
     */
    parameters?: { [key: string]: string; };
    /**
     * provisioner indicates the type of the provisioner.
     * @type {string}
     * @memberof V1StorageClass
     */
    provisioner: string;
    /**
     * reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
     * @type {string}
     * @memberof V1StorageClass
     */
    reclaimPolicy?: string;
    /**
     * volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
     * @type {string}
     * @memberof V1StorageClass
     */
    volumeBindingMode?: string;
}

/**
 * Check if a given object implements the V1StorageClass interface.
 */
export function instanceOfV1StorageClass(value: object): value is V1StorageClass {
    if (!('provisioner' in value) || value['provisioner'] === undefined) return false;
    return true;
}

export function V1StorageClassFromJSON(json: any): V1StorageClass {
    return V1StorageClassFromJSONTyped(json, false);
}

export function V1StorageClassFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1StorageClass {
    if (json == null) {
        return json;
    }
    return {
        
        'allowVolumeExpansion': json['allowVolumeExpansion'] == null ? undefined : json['allowVolumeExpansion'],
        'allowedTopologies': json['allowedTopologies'] == null ? undefined : ((json['allowedTopologies'] as Array<any>).map(V1TopologySelectorTermFromJSON)),
        'apiVersion': json['apiVersion'] == null ? undefined : json['apiVersion'],
        'kind': json['kind'] == null ? undefined : json['kind'],
        'metadata': json['metadata'] == null ? undefined : V1ObjectMetaFromJSON(json['metadata']),
        'mountOptions': json['mountOptions'] == null ? undefined : json['mountOptions'],
        'parameters': json['parameters'] == null ? undefined : json['parameters'],
        'provisioner': json['provisioner'],
        'reclaimPolicy': json['reclaimPolicy'] == null ? undefined : json['reclaimPolicy'],
        'volumeBindingMode': json['volumeBindingMode'] == null ? undefined : json['volumeBindingMode'],
    };
}

export function V1StorageClassToJSON(value?: V1StorageClass | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'allowVolumeExpansion': value['allowVolumeExpansion'],
        'allowedTopologies': value['allowedTopologies'] == null ? undefined : ((value['allowedTopologies'] as Array<any>).map(V1TopologySelectorTermToJSON)),
        'apiVersion': value['apiVersion'],
        'kind': value['kind'],
        'metadata': V1ObjectMetaToJSON(value['metadata']),
        'mountOptions': value['mountOptions'],
        'parameters': value['parameters'],
        'provisioner': value['provisioner'],
        'reclaimPolicy': value['reclaimPolicy'],
        'volumeBindingMode': value['volumeBindingMode'],
    };
}

