/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1ObjectReference } from './V1ObjectReference';
import {
    V1ObjectReferenceFromJSON,
    V1ObjectReferenceFromJSONTyped,
    V1ObjectReferenceToJSON,
} from './V1ObjectReference';
import type { EventsV1EventSeries } from './EventsV1EventSeries';
import {
    EventsV1EventSeriesFromJSON,
    EventsV1EventSeriesFromJSONTyped,
    EventsV1EventSeriesToJSON,
} from './EventsV1EventSeries';
import type { V1EventSource } from './V1EventSource';
import {
    V1EventSourceFromJSON,
    V1EventSourceFromJSONTyped,
    V1EventSourceToJSON,
} from './V1EventSource';
import type { V1ObjectMeta } from './V1ObjectMeta';
import {
    V1ObjectMetaFromJSON,
    V1ObjectMetaFromJSONTyped,
    V1ObjectMetaToJSON,
} from './V1ObjectMeta';

/**
 * Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
 * @export
 * @interface EventsV1Event
 */
export interface EventsV1Event {
    /**
     * action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.
     * @type {string}
     * @memberof EventsV1Event
     */
    action?: string;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof EventsV1Event
     */
    apiVersion?: string;
    /**
     * deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
     * @type {number}
     * @memberof EventsV1Event
     */
    deprecatedCount?: number;
    /**
     * deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
     * @type {Date}
     * @memberof EventsV1Event
     */
    deprecatedFirstTimestamp?: Date;
    /**
     * deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
     * @type {Date}
     * @memberof EventsV1Event
     */
    deprecatedLastTimestamp?: Date;
    /**
     * 
     * @type {V1EventSource}
     * @memberof EventsV1Event
     */
    deprecatedSource?: V1EventSource;
    /**
     * MicroTime is version of Time with microsecond level precision.
     * @type {Date}
     * @memberof EventsV1Event
     */
    eventTime: Date;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof EventsV1Event
     */
    kind?: string;
    /**
     * 
     * @type {V1ObjectMeta}
     * @memberof EventsV1Event
     */
    metadata?: V1ObjectMeta;
    /**
     * note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
     * @type {string}
     * @memberof EventsV1Event
     */
    note?: string;
    /**
     * reason is why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.
     * @type {string}
     * @memberof EventsV1Event
     */
    reason?: string;
    /**
     * 
     * @type {V1ObjectReference}
     * @memberof EventsV1Event
     */
    regarding?: V1ObjectReference;
    /**
     * 
     * @type {V1ObjectReference}
     * @memberof EventsV1Event
     */
    related?: V1ObjectReference;
    /**
     * reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.
     * @type {string}
     * @memberof EventsV1Event
     */
    reportingController?: string;
    /**
     * reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.
     * @type {string}
     * @memberof EventsV1Event
     */
    reportingInstance?: string;
    /**
     * 
     * @type {EventsV1EventSeries}
     * @memberof EventsV1Event
     */
    series?: EventsV1EventSeries;
    /**
     * type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.
     * @type {string}
     * @memberof EventsV1Event
     */
    type?: string;
}

/**
 * Check if a given object implements the EventsV1Event interface.
 */
export function instanceOfEventsV1Event(value: object): value is EventsV1Event {
    if (!('eventTime' in value) || value['eventTime'] === undefined) return false;
    return true;
}

export function EventsV1EventFromJSON(json: any): EventsV1Event {
    return EventsV1EventFromJSONTyped(json, false);
}

export function EventsV1EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventsV1Event {
    if (json == null) {
        return json;
    }
    return {
        
        'action': json['action'] == null ? undefined : json['action'],
        'apiVersion': json['apiVersion'] == null ? undefined : json['apiVersion'],
        'deprecatedCount': json['deprecatedCount'] == null ? undefined : json['deprecatedCount'],
        'deprecatedFirstTimestamp': json['deprecatedFirstTimestamp'] == null ? undefined : (new Date(json['deprecatedFirstTimestamp'])),
        'deprecatedLastTimestamp': json['deprecatedLastTimestamp'] == null ? undefined : (new Date(json['deprecatedLastTimestamp'])),
        'deprecatedSource': json['deprecatedSource'] == null ? undefined : V1EventSourceFromJSON(json['deprecatedSource']),
        'eventTime': (new Date(json['eventTime'])),
        'kind': json['kind'] == null ? undefined : json['kind'],
        'metadata': json['metadata'] == null ? undefined : V1ObjectMetaFromJSON(json['metadata']),
        'note': json['note'] == null ? undefined : json['note'],
        'reason': json['reason'] == null ? undefined : json['reason'],
        'regarding': json['regarding'] == null ? undefined : V1ObjectReferenceFromJSON(json['regarding']),
        'related': json['related'] == null ? undefined : V1ObjectReferenceFromJSON(json['related']),
        'reportingController': json['reportingController'] == null ? undefined : json['reportingController'],
        'reportingInstance': json['reportingInstance'] == null ? undefined : json['reportingInstance'],
        'series': json['series'] == null ? undefined : EventsV1EventSeriesFromJSON(json['series']),
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function EventsV1EventToJSON(value?: EventsV1Event | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'action': value['action'],
        'apiVersion': value['apiVersion'],
        'deprecatedCount': value['deprecatedCount'],
        'deprecatedFirstTimestamp': value['deprecatedFirstTimestamp'] == null ? undefined : ((value['deprecatedFirstTimestamp']).toISOString()),
        'deprecatedLastTimestamp': value['deprecatedLastTimestamp'] == null ? undefined : ((value['deprecatedLastTimestamp']).toISOString()),
        'deprecatedSource': V1EventSourceToJSON(value['deprecatedSource']),
        'eventTime': ((value['eventTime']).toISOString()),
        'kind': value['kind'],
        'metadata': V1ObjectMetaToJSON(value['metadata']),
        'note': value['note'],
        'reason': value['reason'],
        'regarding': V1ObjectReferenceToJSON(value['regarding']),
        'related': V1ObjectReferenceToJSON(value['related']),
        'reportingController': value['reportingController'],
        'reportingInstance': value['reportingInstance'],
        'series': EventsV1EventSeriesToJSON(value['series']),
        'type': value['type'],
    };
}

