/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1SecretReference } from './V1SecretReference';
import {
    V1SecretReferenceFromJSON,
    V1SecretReferenceFromJSONTyped,
    V1SecretReferenceToJSON,
} from './V1SecretReference';

/**
 * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
 * @export
 * @interface V1RBDPersistentVolumeSource
 */
export interface V1RBDPersistentVolumeSource {
    /**
     * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     * @type {string}
     * @memberof V1RBDPersistentVolumeSource
     */
    fsType?: string;
    /**
     * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {string}
     * @memberof V1RBDPersistentVolumeSource
     */
    image: string;
    /**
     * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {string}
     * @memberof V1RBDPersistentVolumeSource
     */
    keyring?: string;
    /**
     * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {Array<string>}
     * @memberof V1RBDPersistentVolumeSource
     */
    monitors: Array<string>;
    /**
     * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {string}
     * @memberof V1RBDPersistentVolumeSource
     */
    pool?: string;
    /**
     * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {boolean}
     * @memberof V1RBDPersistentVolumeSource
     */
    readOnly?: boolean;
    /**
     * 
     * @type {V1SecretReference}
     * @memberof V1RBDPersistentVolumeSource
     */
    secretRef?: V1SecretReference;
    /**
     * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {string}
     * @memberof V1RBDPersistentVolumeSource
     */
    user?: string;
}

/**
 * Check if a given object implements the V1RBDPersistentVolumeSource interface.
 */
export function instanceOfV1RBDPersistentVolumeSource(value: object): value is V1RBDPersistentVolumeSource {
    if (!('image' in value) || value['image'] === undefined) return false;
    if (!('monitors' in value) || value['monitors'] === undefined) return false;
    return true;
}

export function V1RBDPersistentVolumeSourceFromJSON(json: any): V1RBDPersistentVolumeSource {
    return V1RBDPersistentVolumeSourceFromJSONTyped(json, false);
}

export function V1RBDPersistentVolumeSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1RBDPersistentVolumeSource {
    if (json == null) {
        return json;
    }
    return {
        
        'fsType': json['fsType'] == null ? undefined : json['fsType'],
        'image': json['image'],
        'keyring': json['keyring'] == null ? undefined : json['keyring'],
        'monitors': json['monitors'],
        'pool': json['pool'] == null ? undefined : json['pool'],
        'readOnly': json['readOnly'] == null ? undefined : json['readOnly'],
        'secretRef': json['secretRef'] == null ? undefined : V1SecretReferenceFromJSON(json['secretRef']),
        'user': json['user'] == null ? undefined : json['user'],
    };
}

export function V1RBDPersistentVolumeSourceToJSON(value?: V1RBDPersistentVolumeSource | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'fsType': value['fsType'],
        'image': value['image'],
        'keyring': value['keyring'],
        'monitors': value['monitors'],
        'pool': value['pool'],
        'readOnly': value['readOnly'],
        'secretRef': V1SecretReferenceToJSON(value['secretRef']),
        'user': value['user'],
    };
}

