/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
 * @export
 * @interface V1AzureDiskVolumeSource
 */
export interface V1AzureDiskVolumeSource {
    /**
     * cachingMode is the Host Caching mode: None, Read Only, Read Write.
     * @type {string}
     * @memberof V1AzureDiskVolumeSource
     */
    cachingMode?: string;
    /**
     * diskName is the Name of the data disk in the blob storage
     * @type {string}
     * @memberof V1AzureDiskVolumeSource
     */
    diskName: string;
    /**
     * diskURI is the URI of data disk in the blob storage
     * @type {string}
     * @memberof V1AzureDiskVolumeSource
     */
    diskURI: string;
    /**
     * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * @type {string}
     * @memberof V1AzureDiskVolumeSource
     */
    fsType?: string;
    /**
     * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
     * @type {string}
     * @memberof V1AzureDiskVolumeSource
     */
    kind?: string;
    /**
     * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @type {boolean}
     * @memberof V1AzureDiskVolumeSource
     */
    readOnly?: boolean;
}

/**
 * Check if a given object implements the V1AzureDiskVolumeSource interface.
 */
export function instanceOfV1AzureDiskVolumeSource(value: object): value is V1AzureDiskVolumeSource {
    if (!('diskName' in value) || value['diskName'] === undefined) return false;
    if (!('diskURI' in value) || value['diskURI'] === undefined) return false;
    return true;
}

export function V1AzureDiskVolumeSourceFromJSON(json: any): V1AzureDiskVolumeSource {
    return V1AzureDiskVolumeSourceFromJSONTyped(json, false);
}

export function V1AzureDiskVolumeSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1AzureDiskVolumeSource {
    if (json == null) {
        return json;
    }
    return {
        
        'cachingMode': json['cachingMode'] == null ? undefined : json['cachingMode'],
        'diskName': json['diskName'],
        'diskURI': json['diskURI'],
        'fsType': json['fsType'] == null ? undefined : json['fsType'],
        'kind': json['kind'] == null ? undefined : json['kind'],
        'readOnly': json['readOnly'] == null ? undefined : json['readOnly'],
    };
}

export function V1AzureDiskVolumeSourceToJSON(value?: V1AzureDiskVolumeSource | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'cachingMode': value['cachingMode'],
        'diskName': value['diskName'],
        'diskURI': value['diskURI'],
        'fsType': value['fsType'],
        'kind': value['kind'],
        'readOnly': value['readOnly'],
    };
}

