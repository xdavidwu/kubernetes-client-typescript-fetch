/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1LabelSelector } from './V1LabelSelector';
import {
    V1LabelSelectorFromJSON,
    V1LabelSelectorFromJSONTyped,
    V1LabelSelectorToJSON,
} from './V1LabelSelector';

/**
 * ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
 * @export
 * @interface V1ClusterTrustBundleProjection
 */
export interface V1ClusterTrustBundleProjection {
    /**
     * 
     * @type {V1LabelSelector}
     * @memberof V1ClusterTrustBundleProjection
     */
    labelSelector?: V1LabelSelector;
    /**
     * Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.
     * @type {string}
     * @memberof V1ClusterTrustBundleProjection
     */
    name?: string;
    /**
     * If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
     * @type {boolean}
     * @memberof V1ClusterTrustBundleProjection
     */
    optional?: boolean;
    /**
     * Relative path from the volume root to write the bundle.
     * @type {string}
     * @memberof V1ClusterTrustBundleProjection
     */
    path: string;
    /**
     * Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.
     * @type {string}
     * @memberof V1ClusterTrustBundleProjection
     */
    signerName?: string;
}

/**
 * Check if a given object implements the V1ClusterTrustBundleProjection interface.
 */
export function instanceOfV1ClusterTrustBundleProjection(value: object): value is V1ClusterTrustBundleProjection {
    if (!('path' in value) || value['path'] === undefined) return false;
    return true;
}

export function V1ClusterTrustBundleProjectionFromJSON(json: any): V1ClusterTrustBundleProjection {
    return V1ClusterTrustBundleProjectionFromJSONTyped(json, false);
}

export function V1ClusterTrustBundleProjectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ClusterTrustBundleProjection {
    if (json == null) {
        return json;
    }
    return {
        
        'labelSelector': json['labelSelector'] == null ? undefined : V1LabelSelectorFromJSON(json['labelSelector']),
        'name': json['name'] == null ? undefined : json['name'],
        'optional': json['optional'] == null ? undefined : json['optional'],
        'path': json['path'],
        'signerName': json['signerName'] == null ? undefined : json['signerName'],
    };
}

export function V1ClusterTrustBundleProjectionToJSON(value?: V1ClusterTrustBundleProjection | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'labelSelector': V1LabelSelectorToJSON(value['labelSelector']),
        'name': value['name'],
        'optional': value['optional'],
        'path': value['path'],
        'signerName': value['signerName'],
    };
}

