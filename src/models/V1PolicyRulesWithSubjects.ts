/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1ResourcePolicyRule } from './V1ResourcePolicyRule';
import {
    V1ResourcePolicyRuleFromJSON,
    V1ResourcePolicyRuleFromJSONTyped,
    V1ResourcePolicyRuleToJSON,
} from './V1ResourcePolicyRule';
import type { FlowcontrolV1Subject } from './FlowcontrolV1Subject';
import {
    FlowcontrolV1SubjectFromJSON,
    FlowcontrolV1SubjectFromJSONTyped,
    FlowcontrolV1SubjectToJSON,
} from './FlowcontrolV1Subject';
import type { V1NonResourcePolicyRule } from './V1NonResourcePolicyRule';
import {
    V1NonResourcePolicyRuleFromJSON,
    V1NonResourcePolicyRuleFromJSONTyped,
    V1NonResourcePolicyRuleToJSON,
} from './V1NonResourcePolicyRule';

/**
 * PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
 * @export
 * @interface V1PolicyRulesWithSubjects
 */
export interface V1PolicyRulesWithSubjects {
    /**
     * `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
     * @type {Array<V1NonResourcePolicyRule>}
     * @memberof V1PolicyRulesWithSubjects
     */
    nonResourceRules?: Array<V1NonResourcePolicyRule>;
    /**
     * `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
     * @type {Array<V1ResourcePolicyRule>}
     * @memberof V1PolicyRulesWithSubjects
     */
    resourceRules?: Array<V1ResourcePolicyRule>;
    /**
     * subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
     * @type {Array<FlowcontrolV1Subject>}
     * @memberof V1PolicyRulesWithSubjects
     */
    subjects: Array<FlowcontrolV1Subject>;
}

/**
 * Check if a given object implements the V1PolicyRulesWithSubjects interface.
 */
export function instanceOfV1PolicyRulesWithSubjects(value: object): value is V1PolicyRulesWithSubjects {
    if (!('subjects' in value) || value['subjects'] === undefined) return false;
    return true;
}

export function V1PolicyRulesWithSubjectsFromJSON(json: any): V1PolicyRulesWithSubjects {
    return V1PolicyRulesWithSubjectsFromJSONTyped(json, false);
}

export function V1PolicyRulesWithSubjectsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PolicyRulesWithSubjects {
    if (json == null) {
        return json;
    }
    return {
        
        'nonResourceRules': json['nonResourceRules'] == null ? undefined : ((json['nonResourceRules'] as Array<any>).map(V1NonResourcePolicyRuleFromJSON)),
        'resourceRules': json['resourceRules'] == null ? undefined : ((json['resourceRules'] as Array<any>).map(V1ResourcePolicyRuleFromJSON)),
        'subjects': ((json['subjects'] as Array<any>).map(FlowcontrolV1SubjectFromJSON)),
    };
}

export function V1PolicyRulesWithSubjectsToJSON(value?: V1PolicyRulesWithSubjects | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'nonResourceRules': value['nonResourceRules'] == null ? undefined : ((value['nonResourceRules'] as Array<any>).map(V1NonResourcePolicyRuleToJSON)),
        'resourceRules': value['resourceRules'] == null ? undefined : ((value['resourceRules'] as Array<any>).map(V1ResourcePolicyRuleToJSON)),
        'subjects': ((value['subjects'] as Array<any>).map(FlowcontrolV1SubjectToJSON)),
    };
}

