/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1KeyToPath } from './V1KeyToPath';
import {
    V1KeyToPathFromJSON,
    V1KeyToPathFromJSONTyped,
    V1KeyToPathToJSON,
} from './V1KeyToPath';

/**
 * Adapts a ConfigMap into a projected volume.
 * 
 * The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
 * @export
 * @interface V1ConfigMapProjection
 */
export interface V1ConfigMapProjection {
    /**
     * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     * @type {Array<V1KeyToPath>}
     * @memberof V1ConfigMapProjection
     */
    items?: Array<V1KeyToPath>;
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof V1ConfigMapProjection
     */
    name?: string;
    /**
     * optional specify whether the ConfigMap or its keys must be defined
     * @type {boolean}
     * @memberof V1ConfigMapProjection
     */
    optional?: boolean;
}

/**
 * Check if a given object implements the V1ConfigMapProjection interface.
 */
export function instanceOfV1ConfigMapProjection(value: object): value is V1ConfigMapProjection {
    return true;
}

export function V1ConfigMapProjectionFromJSON(json: any): V1ConfigMapProjection {
    return V1ConfigMapProjectionFromJSONTyped(json, false);
}

export function V1ConfigMapProjectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ConfigMapProjection {
    if (json == null) {
        return json;
    }
    return {
        
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(V1KeyToPathFromJSON)),
        'name': json['name'] == null ? undefined : json['name'],
        'optional': json['optional'] == null ? undefined : json['optional'],
    };
}

export function V1ConfigMapProjectionToJSON(value?: V1ConfigMapProjection | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(V1KeyToPathToJSON)),
        'name': value['name'],
        'optional': value['optional'],
    };
}

