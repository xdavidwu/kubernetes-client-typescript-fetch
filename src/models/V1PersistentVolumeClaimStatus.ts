/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1PersistentVolumeClaimCondition,
    V1PersistentVolumeClaimConditionFromJSON,
    V1PersistentVolumeClaimConditionFromJSONTyped,
    V1PersistentVolumeClaimConditionToJSON,
} from './';

/**
 * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
 * @export
 * @interface V1PersistentVolumeClaimStatus
 */
export interface V1PersistentVolumeClaimStatus {
    /**
     * accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     * @type {Array<string>}
     * @memberof V1PersistentVolumeClaimStatus
     */
    accessModes?: Array<string>;
    /**
     * allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     * @type {{ [key: string]: string; }}
     * @memberof V1PersistentVolumeClaimStatus
     */
    allocatedResources?: { [key: string]: string; };
    /**
     * capacity represents the actual resources of the underlying volume.
     * @type {{ [key: string]: string; }}
     * @memberof V1PersistentVolumeClaimStatus
     */
    capacity?: { [key: string]: string; };
    /**
     * conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
     * @type {Array<V1PersistentVolumeClaimCondition>}
     * @memberof V1PersistentVolumeClaimStatus
     */
    conditions?: Array<V1PersistentVolumeClaimCondition>;
    /**
     * phase represents the current phase of PersistentVolumeClaim.
     * @type {string}
     * @memberof V1PersistentVolumeClaimStatus
     */
    phase?: string;
    /**
     * resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     * @type {string}
     * @memberof V1PersistentVolumeClaimStatus
     */
    resizeStatus?: string;
}

export function V1PersistentVolumeClaimStatusFromJSON(json: any): V1PersistentVolumeClaimStatus {
    return V1PersistentVolumeClaimStatusFromJSONTyped(json, false);
}

export function V1PersistentVolumeClaimStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PersistentVolumeClaimStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessModes': !exists(json, 'accessModes') ? undefined : json['accessModes'],
        'allocatedResources': !exists(json, 'allocatedResources') ? undefined : json['allocatedResources'],
        'capacity': !exists(json, 'capacity') ? undefined : json['capacity'],
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(V1PersistentVolumeClaimConditionFromJSON)),
        'phase': !exists(json, 'phase') ? undefined : json['phase'],
        'resizeStatus': !exists(json, 'resizeStatus') ? undefined : json['resizeStatus'],
    };
}

export function V1PersistentVolumeClaimStatusToJSON(value?: V1PersistentVolumeClaimStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessModes': value.accessModes,
        'allocatedResources': value.allocatedResources,
        'capacity': value.capacity,
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(V1PersistentVolumeClaimConditionToJSON)),
        'phase': value.phase,
        'resizeStatus': value.resizeStatus,
    };
}


