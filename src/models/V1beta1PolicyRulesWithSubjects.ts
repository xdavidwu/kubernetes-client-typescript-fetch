/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1beta1NonResourcePolicyRule } from './V1beta1NonResourcePolicyRule';
import {
    V1beta1NonResourcePolicyRuleFromJSON,
    V1beta1NonResourcePolicyRuleFromJSONTyped,
    V1beta1NonResourcePolicyRuleToJSON,
} from './V1beta1NonResourcePolicyRule';
import type { V1beta1ResourcePolicyRule } from './V1beta1ResourcePolicyRule';
import {
    V1beta1ResourcePolicyRuleFromJSON,
    V1beta1ResourcePolicyRuleFromJSONTyped,
    V1beta1ResourcePolicyRuleToJSON,
} from './V1beta1ResourcePolicyRule';
import type { V1beta1Subject } from './V1beta1Subject';
import {
    V1beta1SubjectFromJSON,
    V1beta1SubjectFromJSONTyped,
    V1beta1SubjectToJSON,
} from './V1beta1Subject';

/**
 * PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
 * @export
 * @interface V1beta1PolicyRulesWithSubjects
 */
export interface V1beta1PolicyRulesWithSubjects {
    /**
     * `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
     * @type {Array<V1beta1NonResourcePolicyRule>}
     * @memberof V1beta1PolicyRulesWithSubjects
     */
    nonResourceRules?: Array<V1beta1NonResourcePolicyRule>;
    /**
     * `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
     * @type {Array<V1beta1ResourcePolicyRule>}
     * @memberof V1beta1PolicyRulesWithSubjects
     */
    resourceRules?: Array<V1beta1ResourcePolicyRule>;
    /**
     * subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
     * @type {Array<V1beta1Subject>}
     * @memberof V1beta1PolicyRulesWithSubjects
     */
    subjects: Array<V1beta1Subject>;
}

/**
 * Check if a given object implements the V1beta1PolicyRulesWithSubjects interface.
 */
export function instanceOfV1beta1PolicyRulesWithSubjects(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subjects" in value;

    return isInstance;
}

export function V1beta1PolicyRulesWithSubjectsFromJSON(json: any): V1beta1PolicyRulesWithSubjects {
    return V1beta1PolicyRulesWithSubjectsFromJSONTyped(json, false);
}

export function V1beta1PolicyRulesWithSubjectsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1PolicyRulesWithSubjects {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nonResourceRules': !exists(json, 'nonResourceRules') ? undefined : ((json['nonResourceRules'] as Array<any>).map(V1beta1NonResourcePolicyRuleFromJSON)),
        'resourceRules': !exists(json, 'resourceRules') ? undefined : ((json['resourceRules'] as Array<any>).map(V1beta1ResourcePolicyRuleFromJSON)),
        'subjects': ((json['subjects'] as Array<any>).map(V1beta1SubjectFromJSON)),
    };
}

export function V1beta1PolicyRulesWithSubjectsToJSON(value?: V1beta1PolicyRulesWithSubjects | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'nonResourceRules': value.nonResourceRules === undefined ? undefined : ((value.nonResourceRules as Array<any>).map(V1beta1NonResourcePolicyRuleToJSON)),
        'resourceRules': value.resourceRules === undefined ? undefined : ((value.resourceRules as Array<any>).map(V1beta1ResourcePolicyRuleToJSON)),
        'subjects': ((value.subjects as Array<any>).map(V1beta1SubjectToJSON)),
    };
}

