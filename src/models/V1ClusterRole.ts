/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1AggregationRule } from './V1AggregationRule';
import {
    V1AggregationRuleFromJSON,
    V1AggregationRuleFromJSONTyped,
    V1AggregationRuleToJSON,
} from './V1AggregationRule';
import type { V1ObjectMeta } from './V1ObjectMeta';
import {
    V1ObjectMetaFromJSON,
    V1ObjectMetaFromJSONTyped,
    V1ObjectMetaToJSON,
} from './V1ObjectMeta';
import type { V1PolicyRule } from './V1PolicyRule';
import {
    V1PolicyRuleFromJSON,
    V1PolicyRuleFromJSONTyped,
    V1PolicyRuleToJSON,
} from './V1PolicyRule';

/**
 * ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
 * @export
 * @interface V1ClusterRole
 */
export interface V1ClusterRole {
    /**
     * 
     * @type {V1AggregationRule}
     * @memberof V1ClusterRole
     */
    aggregationRule?: V1AggregationRule;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof V1ClusterRole
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof V1ClusterRole
     */
    kind?: string;
    /**
     * 
     * @type {V1ObjectMeta}
     * @memberof V1ClusterRole
     */
    metadata?: V1ObjectMeta;
    /**
     * Rules holds all the PolicyRules for this ClusterRole
     * @type {Array<V1PolicyRule>}
     * @memberof V1ClusterRole
     */
    rules?: Array<V1PolicyRule>;
}

/**
 * Check if a given object implements the V1ClusterRole interface.
 */
export function instanceOfV1ClusterRole(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1ClusterRoleFromJSON(json: any): V1ClusterRole {
    return V1ClusterRoleFromJSONTyped(json, false);
}

export function V1ClusterRoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ClusterRole {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'aggregationRule': !exists(json, 'aggregationRule') ? undefined : V1AggregationRuleFromJSON(json['aggregationRule']),
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'metadata': !exists(json, 'metadata') ? undefined : V1ObjectMetaFromJSON(json['metadata']),
        'rules': !exists(json, 'rules') ? undefined : ((json['rules'] as Array<any>).map(V1PolicyRuleFromJSON)),
    };
}

export function V1ClusterRoleToJSON(value?: V1ClusterRole | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'aggregationRule': V1AggregationRuleToJSON(value.aggregationRule),
        'apiVersion': value.apiVersion,
        'kind': value.kind,
        'metadata': V1ObjectMetaToJSON(value.metadata),
        'rules': value.rules === undefined ? undefined : ((value.rules as Array<any>).map(V1PolicyRuleToJSON)),
    };
}

