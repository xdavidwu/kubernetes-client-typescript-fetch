/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1CustomResourceDefinitionCondition,
    V1CustomResourceDefinitionConditionFromJSON,
    V1CustomResourceDefinitionConditionFromJSONTyped,
    V1CustomResourceDefinitionConditionToJSON,
    V1CustomResourceDefinitionNames,
    V1CustomResourceDefinitionNamesFromJSON,
    V1CustomResourceDefinitionNamesFromJSONTyped,
    V1CustomResourceDefinitionNamesToJSON,
} from './';

/**
 * CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
 * @export
 * @interface V1CustomResourceDefinitionStatus
 */
export interface V1CustomResourceDefinitionStatus {
    /**
     * 
     * @type {V1CustomResourceDefinitionNames}
     * @memberof V1CustomResourceDefinitionStatus
     */
    acceptedNames?: V1CustomResourceDefinitionNames;
    /**
     * conditions indicate state for particular aspects of a CustomResourceDefinition
     * @type {Array<V1CustomResourceDefinitionCondition>}
     * @memberof V1CustomResourceDefinitionStatus
     */
    conditions?: Array<V1CustomResourceDefinitionCondition>;
    /**
     * storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
     * @type {Array<string>}
     * @memberof V1CustomResourceDefinitionStatus
     */
    storedVersions?: Array<string>;
}

export function V1CustomResourceDefinitionStatusFromJSON(json: any): V1CustomResourceDefinitionStatus {
    return V1CustomResourceDefinitionStatusFromJSONTyped(json, false);
}

export function V1CustomResourceDefinitionStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1CustomResourceDefinitionStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'acceptedNames': !exists(json, 'acceptedNames') ? undefined : V1CustomResourceDefinitionNamesFromJSON(json['acceptedNames']),
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(V1CustomResourceDefinitionConditionFromJSON)),
        'storedVersions': !exists(json, 'storedVersions') ? undefined : json['storedVersions'],
    };
}

export function V1CustomResourceDefinitionStatusToJSON(value?: V1CustomResourceDefinitionStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'acceptedNames': V1CustomResourceDefinitionNamesToJSON(value.acceptedNames),
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(V1CustomResourceDefinitionConditionToJSON)),
        'storedVersions': value.storedVersions,
    };
}


