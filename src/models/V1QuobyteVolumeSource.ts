/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.28.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
 * @export
 * @interface V1QuobyteVolumeSource
 */
export interface V1QuobyteVolumeSource {
    /**
     * group to map volume access to Default is no group
     * @type {string}
     * @memberof V1QuobyteVolumeSource
     */
    group?: string;
    /**
     * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     * @type {boolean}
     * @memberof V1QuobyteVolumeSource
     */
    readOnly?: boolean;
    /**
     * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     * @type {string}
     * @memberof V1QuobyteVolumeSource
     */
    registry: string;
    /**
     * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
     * @type {string}
     * @memberof V1QuobyteVolumeSource
     */
    tenant?: string;
    /**
     * user to map volume access to Defaults to serivceaccount user
     * @type {string}
     * @memberof V1QuobyteVolumeSource
     */
    user?: string;
    /**
     * volume is a string that references an already created Quobyte volume by name.
     * @type {string}
     * @memberof V1QuobyteVolumeSource
     */
    volume: string;
}

/**
 * Check if a given object implements the V1QuobyteVolumeSource interface.
 */
export function instanceOfV1QuobyteVolumeSource(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "registry" in value;
    isInstance = isInstance && "volume" in value;

    return isInstance;
}

export function V1QuobyteVolumeSourceFromJSON(json: any): V1QuobyteVolumeSource {
    return V1QuobyteVolumeSourceFromJSONTyped(json, false);
}

export function V1QuobyteVolumeSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1QuobyteVolumeSource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'group': !exists(json, 'group') ? undefined : json['group'],
        'readOnly': !exists(json, 'readOnly') ? undefined : json['readOnly'],
        'registry': json['registry'],
        'tenant': !exists(json, 'tenant') ? undefined : json['tenant'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'volume': json['volume'],
    };
}

export function V1QuobyteVolumeSourceToJSON(value?: V1QuobyteVolumeSource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'group': value.group,
        'readOnly': value.readOnly,
        'registry': value.registry,
        'tenant': value.tenant,
        'user': value.user,
        'volume': value.volume,
    };
}

