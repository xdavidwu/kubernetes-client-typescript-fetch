/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.28.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1beta3NonResourcePolicyRule } from './V1beta3NonResourcePolicyRule';
import {
    V1beta3NonResourcePolicyRuleFromJSON,
    V1beta3NonResourcePolicyRuleFromJSONTyped,
    V1beta3NonResourcePolicyRuleToJSON,
} from './V1beta3NonResourcePolicyRule';
import type { V1beta3ResourcePolicyRule } from './V1beta3ResourcePolicyRule';
import {
    V1beta3ResourcePolicyRuleFromJSON,
    V1beta3ResourcePolicyRuleFromJSONTyped,
    V1beta3ResourcePolicyRuleToJSON,
} from './V1beta3ResourcePolicyRule';
import type { V1beta3Subject } from './V1beta3Subject';
import {
    V1beta3SubjectFromJSON,
    V1beta3SubjectFromJSONTyped,
    V1beta3SubjectToJSON,
} from './V1beta3Subject';

/**
 * PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
 * @export
 * @interface V1beta3PolicyRulesWithSubjects
 */
export interface V1beta3PolicyRulesWithSubjects {
    /**
     * `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
     * @type {Array<V1beta3NonResourcePolicyRule>}
     * @memberof V1beta3PolicyRulesWithSubjects
     */
    nonResourceRules?: Array<V1beta3NonResourcePolicyRule>;
    /**
     * `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
     * @type {Array<V1beta3ResourcePolicyRule>}
     * @memberof V1beta3PolicyRulesWithSubjects
     */
    resourceRules?: Array<V1beta3ResourcePolicyRule>;
    /**
     * subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
     * @type {Array<V1beta3Subject>}
     * @memberof V1beta3PolicyRulesWithSubjects
     */
    subjects: Array<V1beta3Subject>;
}

/**
 * Check if a given object implements the V1beta3PolicyRulesWithSubjects interface.
 */
export function instanceOfV1beta3PolicyRulesWithSubjects(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subjects" in value;

    return isInstance;
}

export function V1beta3PolicyRulesWithSubjectsFromJSON(json: any): V1beta3PolicyRulesWithSubjects {
    return V1beta3PolicyRulesWithSubjectsFromJSONTyped(json, false);
}

export function V1beta3PolicyRulesWithSubjectsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta3PolicyRulesWithSubjects {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nonResourceRules': !exists(json, 'nonResourceRules') ? undefined : ((json['nonResourceRules'] as Array<any>).map(V1beta3NonResourcePolicyRuleFromJSON)),
        'resourceRules': !exists(json, 'resourceRules') ? undefined : ((json['resourceRules'] as Array<any>).map(V1beta3ResourcePolicyRuleFromJSON)),
        'subjects': ((json['subjects'] as Array<any>).map(V1beta3SubjectFromJSON)),
    };
}

export function V1beta3PolicyRulesWithSubjectsToJSON(value?: V1beta3PolicyRulesWithSubjects | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'nonResourceRules': value.nonResourceRules === undefined ? undefined : ((value.nonResourceRules as Array<any>).map(V1beta3NonResourcePolicyRuleToJSON)),
        'resourceRules': value.resourceRules === undefined ? undefined : ((value.resourceRules as Array<any>).map(V1beta3ResourcePolicyRuleToJSON)),
        'subjects': ((value.subjects as Array<any>).map(V1beta3SubjectToJSON)),
    };
}

