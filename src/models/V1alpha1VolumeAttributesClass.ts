/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1ObjectMeta } from './V1ObjectMeta';
import {
    V1ObjectMetaFromJSON,
    V1ObjectMetaFromJSONTyped,
    V1ObjectMetaToJSON,
} from './V1ObjectMeta';

/**
 * VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
 * @export
 * @interface V1alpha1VolumeAttributesClass
 */
export interface V1alpha1VolumeAttributesClass {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof V1alpha1VolumeAttributesClass
     */
    apiVersion?: string;
    /**
     * Name of the CSI driver This field is immutable.
     * @type {string}
     * @memberof V1alpha1VolumeAttributesClass
     */
    driverName: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof V1alpha1VolumeAttributesClass
     */
    kind?: string;
    /**
     * 
     * @type {V1ObjectMeta}
     * @memberof V1alpha1VolumeAttributesClass
     */
    metadata?: V1ObjectMeta;
    /**
     * parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
     * 
     * This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
     * @type {{ [key: string]: string; }}
     * @memberof V1alpha1VolumeAttributesClass
     */
    parameters?: { [key: string]: string; };
}

/**
 * Check if a given object implements the V1alpha1VolumeAttributesClass interface.
 */
export function instanceOfV1alpha1VolumeAttributesClass(value: object): value is V1alpha1VolumeAttributesClass {
    if (!('driverName' in value) || value['driverName'] === undefined) return false;
    return true;
}

export function V1alpha1VolumeAttributesClassFromJSON(json: any): V1alpha1VolumeAttributesClass {
    return V1alpha1VolumeAttributesClassFromJSONTyped(json, false);
}

export function V1alpha1VolumeAttributesClassFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1alpha1VolumeAttributesClass {
    if (json == null) {
        return json;
    }
    return {
        
        'apiVersion': json['apiVersion'] == null ? undefined : json['apiVersion'],
        'driverName': json['driverName'],
        'kind': json['kind'] == null ? undefined : json['kind'],
        'metadata': json['metadata'] == null ? undefined : V1ObjectMetaFromJSON(json['metadata']),
        'parameters': json['parameters'] == null ? undefined : json['parameters'],
    };
}

export function V1alpha1VolumeAttributesClassToJSON(value?: V1alpha1VolumeAttributesClass | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'apiVersion': value['apiVersion'],
        'driverName': value['driverName'],
        'kind': value['kind'],
        'metadata': V1ObjectMetaToJSON(value['metadata']),
        'parameters': value['parameters'],
    };
}

