/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreV1EndpointPort } from './CoreV1EndpointPort';
import {
    CoreV1EndpointPortFromJSON,
    CoreV1EndpointPortFromJSONTyped,
    CoreV1EndpointPortToJSON,
} from './CoreV1EndpointPort';
import type { V1EndpointAddress } from './V1EndpointAddress';
import {
    V1EndpointAddressFromJSON,
    V1EndpointAddressFromJSONTyped,
    V1EndpointAddressToJSON,
} from './V1EndpointAddress';

/**
 * EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
 * 
 * 	{
 * 	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
 * 	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
 * 	}
 * 
 * The resulting set of endpoints can be viewed as:
 * 
 * 	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
 * 	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
 * @export
 * @interface V1EndpointSubset
 */
export interface V1EndpointSubset {
    /**
     * IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
     * @type {Array<V1EndpointAddress>}
     * @memberof V1EndpointSubset
     */
    addresses?: Array<V1EndpointAddress>;
    /**
     * IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
     * @type {Array<V1EndpointAddress>}
     * @memberof V1EndpointSubset
     */
    notReadyAddresses?: Array<V1EndpointAddress>;
    /**
     * Port numbers available on the related IP addresses.
     * @type {Array<CoreV1EndpointPort>}
     * @memberof V1EndpointSubset
     */
    ports?: Array<CoreV1EndpointPort>;
}

/**
 * Check if a given object implements the V1EndpointSubset interface.
 */
export function instanceOfV1EndpointSubset(value: object): value is V1EndpointSubset {
    return true;
}

export function V1EndpointSubsetFromJSON(json: any): V1EndpointSubset {
    return V1EndpointSubsetFromJSONTyped(json, false);
}

export function V1EndpointSubsetFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1EndpointSubset {
    if (json == null) {
        return json;
    }
    return {
        
        'addresses': json['addresses'] == null ? undefined : ((json['addresses'] as Array<any>).map(V1EndpointAddressFromJSON)),
        'notReadyAddresses': json['notReadyAddresses'] == null ? undefined : ((json['notReadyAddresses'] as Array<any>).map(V1EndpointAddressFromJSON)),
        'ports': json['ports'] == null ? undefined : ((json['ports'] as Array<any>).map(CoreV1EndpointPortFromJSON)),
    };
}

export function V1EndpointSubsetToJSON(value?: V1EndpointSubset | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'addresses': value['addresses'] == null ? undefined : ((value['addresses'] as Array<any>).map(V1EndpointAddressToJSON)),
        'notReadyAddresses': value['notReadyAddresses'] == null ? undefined : ((value['notReadyAddresses'] as Array<any>).map(V1EndpointAddressToJSON)),
        'ports': value['ports'] == null ? undefined : ((value['ports'] as Array<any>).map(CoreV1EndpointPortToJSON)),
    };
}

