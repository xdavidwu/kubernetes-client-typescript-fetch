/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1NodeSelectorRequirement } from './V1NodeSelectorRequirement';
import {
    V1NodeSelectorRequirementFromJSON,
    V1NodeSelectorRequirementFromJSONTyped,
    V1NodeSelectorRequirementToJSON,
} from './V1NodeSelectorRequirement';

/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 * @export
 * @interface V1NodeSelectorTerm
 */
export interface V1NodeSelectorTerm {
    /**
     * A list of node selector requirements by node's labels.
     * @type {Array<V1NodeSelectorRequirement>}
     * @memberof V1NodeSelectorTerm
     */
    matchExpressions?: Array<V1NodeSelectorRequirement>;
    /**
     * A list of node selector requirements by node's fields.
     * @type {Array<V1NodeSelectorRequirement>}
     * @memberof V1NodeSelectorTerm
     */
    matchFields?: Array<V1NodeSelectorRequirement>;
}

/**
 * Check if a given object implements the V1NodeSelectorTerm interface.
 */
export function instanceOfV1NodeSelectorTerm(value: object): value is V1NodeSelectorTerm {
    return true;
}

export function V1NodeSelectorTermFromJSON(json: any): V1NodeSelectorTerm {
    return V1NodeSelectorTermFromJSONTyped(json, false);
}

export function V1NodeSelectorTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1NodeSelectorTerm {
    if (json == null) {
        return json;
    }
    return {
        
        'matchExpressions': json['matchExpressions'] == null ? undefined : ((json['matchExpressions'] as Array<any>).map(V1NodeSelectorRequirementFromJSON)),
        'matchFields': json['matchFields'] == null ? undefined : ((json['matchFields'] as Array<any>).map(V1NodeSelectorRequirementFromJSON)),
    };
}

export function V1NodeSelectorTermToJSON(value?: V1NodeSelectorTerm | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'matchExpressions': value['matchExpressions'] == null ? undefined : ((value['matchExpressions'] as Array<any>).map(V1NodeSelectorRequirementToJSON)),
        'matchFields': value['matchFields'] == null ? undefined : ((value['matchFields'] as Array<any>).map(V1NodeSelectorRequirementToJSON)),
    };
}

