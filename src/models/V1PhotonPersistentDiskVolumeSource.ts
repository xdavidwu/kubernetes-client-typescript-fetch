/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents a Photon Controller persistent disk resource.
 * @export
 * @interface V1PhotonPersistentDiskVolumeSource
 */
export interface V1PhotonPersistentDiskVolumeSource {
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * @type {string}
     * @memberof V1PhotonPersistentDiskVolumeSource
     */
    fsType?: string;
    /**
     * pdID is the ID that identifies Photon Controller persistent disk
     * @type {string}
     * @memberof V1PhotonPersistentDiskVolumeSource
     */
    pdID: string;
}

/**
 * Check if a given object implements the V1PhotonPersistentDiskVolumeSource interface.
 */
export function instanceOfV1PhotonPersistentDiskVolumeSource(value: object): value is V1PhotonPersistentDiskVolumeSource {
    if (!('pdID' in value) || value['pdID'] === undefined) return false;
    return true;
}

export function V1PhotonPersistentDiskVolumeSourceFromJSON(json: any): V1PhotonPersistentDiskVolumeSource {
    return V1PhotonPersistentDiskVolumeSourceFromJSONTyped(json, false);
}

export function V1PhotonPersistentDiskVolumeSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PhotonPersistentDiskVolumeSource {
    if (json == null) {
        return json;
    }
    return {
        
        'fsType': json['fsType'] == null ? undefined : json['fsType'],
        'pdID': json['pdID'],
    };
}

export function V1PhotonPersistentDiskVolumeSourceToJSON(value?: V1PhotonPersistentDiskVolumeSource | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'fsType': value['fsType'],
        'pdID': value['pdID'],
    };
}

