/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1alpha2DriverAllocationResult } from './V1alpha2DriverAllocationResult';
import {
    V1alpha2DriverAllocationResultFromJSON,
    V1alpha2DriverAllocationResultFromJSONTyped,
    V1alpha2DriverAllocationResultToJSON,
} from './V1alpha2DriverAllocationResult';

/**
 * StructuredResourceHandle is the in-tree representation of the allocation result.
 * @export
 * @interface V1alpha2StructuredResourceHandle
 */
export interface V1alpha2StructuredResourceHandle {
    /**
     * NodeName is the name of the node providing the necessary resources if the resources are local to a node.
     * @type {string}
     * @memberof V1alpha2StructuredResourceHandle
     */
    nodeName?: string;
    /**
     * Results lists all allocated driver resources.
     * @type {Array<V1alpha2DriverAllocationResult>}
     * @memberof V1alpha2StructuredResourceHandle
     */
    results: Array<V1alpha2DriverAllocationResult>;
    /**
     * VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters at the time that the claim was allocated.
     * @type {object}
     * @memberof V1alpha2StructuredResourceHandle
     */
    vendorClaimParameters?: object;
    /**
     * VendorClassParameters are the per-claim configuration parameters from the resource class at the time that the claim was allocated.
     * @type {object}
     * @memberof V1alpha2StructuredResourceHandle
     */
    vendorClassParameters?: object;
}

/**
 * Check if a given object implements the V1alpha2StructuredResourceHandle interface.
 */
export function instanceOfV1alpha2StructuredResourceHandle(value: object): value is V1alpha2StructuredResourceHandle {
    if (!('results' in value) || value['results'] === undefined) return false;
    return true;
}

export function V1alpha2StructuredResourceHandleFromJSON(json: any): V1alpha2StructuredResourceHandle {
    return V1alpha2StructuredResourceHandleFromJSONTyped(json, false);
}

export function V1alpha2StructuredResourceHandleFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1alpha2StructuredResourceHandle {
    if (json == null) {
        return json;
    }
    return {
        
        'nodeName': json['nodeName'] == null ? undefined : json['nodeName'],
        'results': ((json['results'] as Array<any>).map(V1alpha2DriverAllocationResultFromJSON)),
        'vendorClaimParameters': json['vendorClaimParameters'] == null ? undefined : json['vendorClaimParameters'],
        'vendorClassParameters': json['vendorClassParameters'] == null ? undefined : json['vendorClassParameters'],
    };
}

export function V1alpha2StructuredResourceHandleToJSON(value?: V1alpha2StructuredResourceHandle | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'nodeName': value['nodeName'],
        'results': ((value['results'] as Array<any>).map(V1alpha2DriverAllocationResultToJSON)),
        'vendorClaimParameters': value['vendorClaimParameters'],
        'vendorClassParameters': value['vendorClassParameters'],
    };
}

