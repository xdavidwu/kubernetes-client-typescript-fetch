/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1alpha2AllocationResult } from './V1alpha2AllocationResult';
import {
    V1alpha2AllocationResultFromJSON,
    V1alpha2AllocationResultFromJSONTyped,
    V1alpha2AllocationResultToJSON,
} from './V1alpha2AllocationResult';
import type { V1alpha2ResourceClaimConsumerReference } from './V1alpha2ResourceClaimConsumerReference';
import {
    V1alpha2ResourceClaimConsumerReferenceFromJSON,
    V1alpha2ResourceClaimConsumerReferenceFromJSONTyped,
    V1alpha2ResourceClaimConsumerReferenceToJSON,
} from './V1alpha2ResourceClaimConsumerReference';

/**
 * ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
 * @export
 * @interface V1alpha2ResourceClaimStatus
 */
export interface V1alpha2ResourceClaimStatus {
    /**
     * 
     * @type {V1alpha2AllocationResult}
     * @memberof V1alpha2ResourceClaimStatus
     */
    allocation?: V1alpha2AllocationResult;
    /**
     * DeallocationRequested indicates that a ResourceClaim is to be deallocated.
     * 
     * The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
     * 
     * While DeallocationRequested is set, no new consumers may be added to ReservedFor.
     * @type {boolean}
     * @memberof V1alpha2ResourceClaimStatus
     */
    deallocationRequested?: boolean;
    /**
     * DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
     * @type {string}
     * @memberof V1alpha2ResourceClaimStatus
     */
    driverName?: string;
    /**
     * ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
     * 
     * There can be at most 32 such reservations. This may get increased in the future, but not reduced.
     * @type {Array<V1alpha2ResourceClaimConsumerReference>}
     * @memberof V1alpha2ResourceClaimStatus
     */
    reservedFor?: Array<V1alpha2ResourceClaimConsumerReference>;
}

/**
 * Check if a given object implements the V1alpha2ResourceClaimStatus interface.
 */
export function instanceOfV1alpha2ResourceClaimStatus(value: object): value is V1alpha2ResourceClaimStatus {
    return true;
}

export function V1alpha2ResourceClaimStatusFromJSON(json: any): V1alpha2ResourceClaimStatus {
    return V1alpha2ResourceClaimStatusFromJSONTyped(json, false);
}

export function V1alpha2ResourceClaimStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1alpha2ResourceClaimStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'allocation': json['allocation'] == null ? undefined : V1alpha2AllocationResultFromJSON(json['allocation']),
        'deallocationRequested': json['deallocationRequested'] == null ? undefined : json['deallocationRequested'],
        'driverName': json['driverName'] == null ? undefined : json['driverName'],
        'reservedFor': json['reservedFor'] == null ? undefined : ((json['reservedFor'] as Array<any>).map(V1alpha2ResourceClaimConsumerReferenceFromJSON)),
    };
}

export function V1alpha2ResourceClaimStatusToJSON(value?: V1alpha2ResourceClaimStatus | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'allocation': V1alpha2AllocationResultToJSON(value['allocation']),
        'deallocationRequested': value['deallocationRequested'],
        'driverName': value['driverName'],
        'reservedFor': value['reservedFor'] == null ? undefined : ((value['reservedFor'] as Array<any>).map(V1alpha2ResourceClaimConsumerReferenceToJSON)),
    };
}

