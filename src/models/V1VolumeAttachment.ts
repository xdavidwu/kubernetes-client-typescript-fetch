/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1ObjectMeta } from './V1ObjectMeta';
import {
    V1ObjectMetaFromJSON,
    V1ObjectMetaFromJSONTyped,
    V1ObjectMetaToJSON,
} from './V1ObjectMeta';
import type { V1VolumeAttachmentStatus } from './V1VolumeAttachmentStatus';
import {
    V1VolumeAttachmentStatusFromJSON,
    V1VolumeAttachmentStatusFromJSONTyped,
    V1VolumeAttachmentStatusToJSON,
} from './V1VolumeAttachmentStatus';
import type { V1VolumeAttachmentSpec } from './V1VolumeAttachmentSpec';
import {
    V1VolumeAttachmentSpecFromJSON,
    V1VolumeAttachmentSpecFromJSONTyped,
    V1VolumeAttachmentSpecToJSON,
} from './V1VolumeAttachmentSpec';

/**
 * VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
 * 
 * VolumeAttachment objects are non-namespaced.
 * @export
 * @interface V1VolumeAttachment
 */
export interface V1VolumeAttachment {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof V1VolumeAttachment
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof V1VolumeAttachment
     */
    kind?: string;
    /**
     * 
     * @type {V1ObjectMeta}
     * @memberof V1VolumeAttachment
     */
    metadata?: V1ObjectMeta;
    /**
     * 
     * @type {V1VolumeAttachmentSpec}
     * @memberof V1VolumeAttachment
     */
    spec: V1VolumeAttachmentSpec;
    /**
     * 
     * @type {V1VolumeAttachmentStatus}
     * @memberof V1VolumeAttachment
     */
    status?: V1VolumeAttachmentStatus;
}

/**
 * Check if a given object implements the V1VolumeAttachment interface.
 */
export function instanceOfV1VolumeAttachment(value: object): value is V1VolumeAttachment {
    if (!('spec' in value) || value['spec'] === undefined) return false;
    return true;
}

export function V1VolumeAttachmentFromJSON(json: any): V1VolumeAttachment {
    return V1VolumeAttachmentFromJSONTyped(json, false);
}

export function V1VolumeAttachmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1VolumeAttachment {
    if (json == null) {
        return json;
    }
    return {
        
        'apiVersion': json['apiVersion'] == null ? undefined : json['apiVersion'],
        'kind': json['kind'] == null ? undefined : json['kind'],
        'metadata': json['metadata'] == null ? undefined : V1ObjectMetaFromJSON(json['metadata']),
        'spec': V1VolumeAttachmentSpecFromJSON(json['spec']),
        'status': json['status'] == null ? undefined : V1VolumeAttachmentStatusFromJSON(json['status']),
    };
}

export function V1VolumeAttachmentToJSON(value?: V1VolumeAttachment | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'apiVersion': value['apiVersion'],
        'kind': value['kind'],
        'metadata': V1ObjectMetaToJSON(value['metadata']),
        'spec': V1VolumeAttachmentSpecToJSON(value['spec']),
        'status': V1VolumeAttachmentStatusToJSON(value['status']),
    };
}

