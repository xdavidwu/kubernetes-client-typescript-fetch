/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1PortStatus } from './V1PortStatus';
import {
    V1PortStatusFromJSON,
    V1PortStatusFromJSONTyped,
    V1PortStatusToJSON,
} from './V1PortStatus';

/**
 * LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
 * @export
 * @interface V1LoadBalancerIngress
 */
export interface V1LoadBalancerIngress {
    /**
     * Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
     * @type {string}
     * @memberof V1LoadBalancerIngress
     */
    hostname?: string;
    /**
     * IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
     * @type {string}
     * @memberof V1LoadBalancerIngress
     */
    ip?: string;
    /**
     * IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified. Setting this to "VIP" indicates that traffic is delivered to the node with the destination set to the load-balancer's IP and port. Setting this to "Proxy" indicates that traffic is delivered to the node or pod with the destination set to the node's IP and node port or the pod's IP and port. Service implementations may use this information to adjust traffic routing.
     * @type {string}
     * @memberof V1LoadBalancerIngress
     */
    ipMode?: string;
    /**
     * Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
     * @type {Array<V1PortStatus>}
     * @memberof V1LoadBalancerIngress
     */
    ports?: Array<V1PortStatus>;
}

/**
 * Check if a given object implements the V1LoadBalancerIngress interface.
 */
export function instanceOfV1LoadBalancerIngress(value: object): value is V1LoadBalancerIngress {
    return true;
}

export function V1LoadBalancerIngressFromJSON(json: any): V1LoadBalancerIngress {
    return V1LoadBalancerIngressFromJSONTyped(json, false);
}

export function V1LoadBalancerIngressFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1LoadBalancerIngress {
    if (json == null) {
        return json;
    }
    return {
        
        'hostname': json['hostname'] == null ? undefined : json['hostname'],
        'ip': json['ip'] == null ? undefined : json['ip'],
        'ipMode': json['ipMode'] == null ? undefined : json['ipMode'],
        'ports': json['ports'] == null ? undefined : ((json['ports'] as Array<any>).map(V1PortStatusFromJSON)),
    };
}

export function V1LoadBalancerIngressToJSON(value?: V1LoadBalancerIngress | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'hostname': value['hostname'],
        'ip': value['ip'],
        'ipMode': value['ipMode'],
        'ports': value['ports'] == null ? undefined : ((value['ports'] as Array<any>).map(V1PortStatusToJSON)),
    };
}

