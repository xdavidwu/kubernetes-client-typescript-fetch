/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1SecretReference } from './V1SecretReference';
import {
    V1SecretReferenceFromJSON,
    V1SecretReferenceFromJSONTyped,
    V1SecretReferenceToJSON,
} from './V1SecretReference';

/**
 * FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
 * @export
 * @interface V1FlexPersistentVolumeSource
 */
export interface V1FlexPersistentVolumeSource {
    /**
     * driver is the name of the driver to use for this volume.
     * @type {string}
     * @memberof V1FlexPersistentVolumeSource
     */
    driver: string;
    /**
     * fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     * @type {string}
     * @memberof V1FlexPersistentVolumeSource
     */
    fsType?: string;
    /**
     * options is Optional: this field holds extra command options if any.
     * @type {{ [key: string]: string; }}
     * @memberof V1FlexPersistentVolumeSource
     */
    options?: { [key: string]: string; };
    /**
     * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @type {boolean}
     * @memberof V1FlexPersistentVolumeSource
     */
    readOnly?: boolean;
    /**
     * 
     * @type {V1SecretReference}
     * @memberof V1FlexPersistentVolumeSource
     */
    secretRef?: V1SecretReference;
}

/**
 * Check if a given object implements the V1FlexPersistentVolumeSource interface.
 */
export function instanceOfV1FlexPersistentVolumeSource(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "driver" in value;

    return isInstance;
}

export function V1FlexPersistentVolumeSourceFromJSON(json: any): V1FlexPersistentVolumeSource {
    return V1FlexPersistentVolumeSourceFromJSONTyped(json, false);
}

export function V1FlexPersistentVolumeSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1FlexPersistentVolumeSource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'driver': json['driver'],
        'fsType': !exists(json, 'fsType') ? undefined : json['fsType'],
        'options': !exists(json, 'options') ? undefined : json['options'],
        'readOnly': !exists(json, 'readOnly') ? undefined : json['readOnly'],
        'secretRef': !exists(json, 'secretRef') ? undefined : V1SecretReferenceFromJSON(json['secretRef']),
    };
}

export function V1FlexPersistentVolumeSourceToJSON(value?: V1FlexPersistentVolumeSource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'driver': value.driver,
        'fsType': value.fsType,
        'options': value.options,
        'readOnly': value.readOnly,
        'secretRef': V1SecretReferenceToJSON(value.secretRef),
    };
}

