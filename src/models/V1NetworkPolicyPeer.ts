/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.28.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1IPBlock } from './V1IPBlock';
import {
    V1IPBlockFromJSON,
    V1IPBlockFromJSONTyped,
    V1IPBlockToJSON,
} from './V1IPBlock';
import type { V1LabelSelector } from './V1LabelSelector';
import {
    V1LabelSelectorFromJSON,
    V1LabelSelectorFromJSONTyped,
    V1LabelSelectorToJSON,
} from './V1LabelSelector';

/**
 * NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
 * @export
 * @interface V1NetworkPolicyPeer
 */
export interface V1NetworkPolicyPeer {
    /**
     * 
     * @type {V1IPBlock}
     * @memberof V1NetworkPolicyPeer
     */
    ipBlock?: V1IPBlock;
    /**
     * 
     * @type {V1LabelSelector}
     * @memberof V1NetworkPolicyPeer
     */
    namespaceSelector?: V1LabelSelector;
    /**
     * 
     * @type {V1LabelSelector}
     * @memberof V1NetworkPolicyPeer
     */
    podSelector?: V1LabelSelector;
}

/**
 * Check if a given object implements the V1NetworkPolicyPeer interface.
 */
export function instanceOfV1NetworkPolicyPeer(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1NetworkPolicyPeerFromJSON(json: any): V1NetworkPolicyPeer {
    return V1NetworkPolicyPeerFromJSONTyped(json, false);
}

export function V1NetworkPolicyPeerFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1NetworkPolicyPeer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ipBlock': !exists(json, 'ipBlock') ? undefined : V1IPBlockFromJSON(json['ipBlock']),
        'namespaceSelector': !exists(json, 'namespaceSelector') ? undefined : V1LabelSelectorFromJSON(json['namespaceSelector']),
        'podSelector': !exists(json, 'podSelector') ? undefined : V1LabelSelectorFromJSON(json['podSelector']),
    };
}

export function V1NetworkPolicyPeerToJSON(value?: V1NetworkPolicyPeer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ipBlock': V1IPBlockToJSON(value.ipBlock),
        'namespaceSelector': V1LabelSelectorToJSON(value.namespaceSelector),
        'podSelector': V1LabelSelectorToJSON(value.podSelector),
    };
}

