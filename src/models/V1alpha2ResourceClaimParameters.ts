/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1alpha2ResourceClaimParametersReference } from './V1alpha2ResourceClaimParametersReference';
import {
    V1alpha2ResourceClaimParametersReferenceFromJSON,
    V1alpha2ResourceClaimParametersReferenceFromJSONTyped,
    V1alpha2ResourceClaimParametersReferenceToJSON,
} from './V1alpha2ResourceClaimParametersReference';
import type { V1ObjectMeta } from './V1ObjectMeta';
import {
    V1ObjectMetaFromJSON,
    V1ObjectMetaFromJSONTyped,
    V1ObjectMetaToJSON,
} from './V1ObjectMeta';
import type { V1alpha2DriverRequests } from './V1alpha2DriverRequests';
import {
    V1alpha2DriverRequestsFromJSON,
    V1alpha2DriverRequestsFromJSONTyped,
    V1alpha2DriverRequestsToJSON,
} from './V1alpha2DriverRequests';

/**
 * ResourceClaimParameters defines resource requests for a ResourceClaim in an in-tree format understood by Kubernetes.
 * @export
 * @interface V1alpha2ResourceClaimParameters
 */
export interface V1alpha2ResourceClaimParameters {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof V1alpha2ResourceClaimParameters
     */
    apiVersion?: string;
    /**
     * DriverRequests describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers. For each driver, this array has at most one entry which then may have one or more per-driver requests.
     * 
     * May be empty, in which case the claim can always be allocated.
     * @type {Array<V1alpha2DriverRequests>}
     * @memberof V1alpha2ResourceClaimParameters
     */
    driverRequests?: Array<V1alpha2DriverRequests>;
    /**
     * 
     * @type {V1alpha2ResourceClaimParametersReference}
     * @memberof V1alpha2ResourceClaimParameters
     */
    generatedFrom?: V1alpha2ResourceClaimParametersReference;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof V1alpha2ResourceClaimParameters
     */
    kind?: string;
    /**
     * 
     * @type {V1ObjectMeta}
     * @memberof V1alpha2ResourceClaimParameters
     */
    metadata?: V1ObjectMeta;
    /**
     * Shareable indicates whether the allocated claim is meant to be shareable by multiple consumers at the same time.
     * @type {boolean}
     * @memberof V1alpha2ResourceClaimParameters
     */
    shareable?: boolean;
}

/**
 * Check if a given object implements the V1alpha2ResourceClaimParameters interface.
 */
export function instanceOfV1alpha2ResourceClaimParameters(value: object): value is V1alpha2ResourceClaimParameters {
    return true;
}

export function V1alpha2ResourceClaimParametersFromJSON(json: any): V1alpha2ResourceClaimParameters {
    return V1alpha2ResourceClaimParametersFromJSONTyped(json, false);
}

export function V1alpha2ResourceClaimParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1alpha2ResourceClaimParameters {
    if (json == null) {
        return json;
    }
    return {
        
        'apiVersion': json['apiVersion'] == null ? undefined : json['apiVersion'],
        'driverRequests': json['driverRequests'] == null ? undefined : ((json['driverRequests'] as Array<any>).map(V1alpha2DriverRequestsFromJSON)),
        'generatedFrom': json['generatedFrom'] == null ? undefined : V1alpha2ResourceClaimParametersReferenceFromJSON(json['generatedFrom']),
        'kind': json['kind'] == null ? undefined : json['kind'],
        'metadata': json['metadata'] == null ? undefined : V1ObjectMetaFromJSON(json['metadata']),
        'shareable': json['shareable'] == null ? undefined : json['shareable'],
    };
}

export function V1alpha2ResourceClaimParametersToJSON(value?: V1alpha2ResourceClaimParameters | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'apiVersion': value['apiVersion'],
        'driverRequests': value['driverRequests'] == null ? undefined : ((value['driverRequests'] as Array<any>).map(V1alpha2DriverRequestsToJSON)),
        'generatedFrom': V1alpha2ResourceClaimParametersReferenceToJSON(value['generatedFrom']),
        'kind': value['kind'],
        'metadata': V1ObjectMetaToJSON(value['metadata']),
        'shareable': value['shareable'],
    };
}

