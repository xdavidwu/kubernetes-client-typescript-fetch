/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1alpha1MigrationCondition } from './V1alpha1MigrationCondition';
import {
    V1alpha1MigrationConditionFromJSON,
    V1alpha1MigrationConditionFromJSONTyped,
    V1alpha1MigrationConditionToJSON,
} from './V1alpha1MigrationCondition';

/**
 * Status of the storage version migration.
 * @export
 * @interface V1alpha1StorageVersionMigrationStatus
 */
export interface V1alpha1StorageVersionMigrationStatus {
    /**
     * The latest available observations of the migration's current state.
     * @type {Array<V1alpha1MigrationCondition>}
     * @memberof V1alpha1StorageVersionMigrationStatus
     */
    conditions?: Array<V1alpha1MigrationCondition>;
    /**
     * ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
     * @type {string}
     * @memberof V1alpha1StorageVersionMigrationStatus
     */
    resourceVersion?: string;
}

/**
 * Check if a given object implements the V1alpha1StorageVersionMigrationStatus interface.
 */
export function instanceOfV1alpha1StorageVersionMigrationStatus(value: object): value is V1alpha1StorageVersionMigrationStatus {
    return true;
}

export function V1alpha1StorageVersionMigrationStatusFromJSON(json: any): V1alpha1StorageVersionMigrationStatus {
    return V1alpha1StorageVersionMigrationStatusFromJSONTyped(json, false);
}

export function V1alpha1StorageVersionMigrationStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1alpha1StorageVersionMigrationStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'conditions': json['conditions'] == null ? undefined : ((json['conditions'] as Array<any>).map(V1alpha1MigrationConditionFromJSON)),
        'resourceVersion': json['resourceVersion'] == null ? undefined : json['resourceVersion'],
    };
}

export function V1alpha1StorageVersionMigrationStatusToJSON(value?: V1alpha1StorageVersionMigrationStatus | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'conditions': value['conditions'] == null ? undefined : ((value['conditions'] as Array<any>).map(V1alpha1MigrationConditionToJSON)),
        'resourceVersion': value['resourceVersion'],
    };
}

