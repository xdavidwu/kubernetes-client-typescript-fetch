/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
 * @export
 * @interface RbacV1Subject
 */
export interface RbacV1Subject {
    /**
     * APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
     * @type {string}
     * @memberof RbacV1Subject
     */
    apiGroup?: string;
    /**
     * Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
     * @type {string}
     * @memberof RbacV1Subject
     */
    kind: string;
    /**
     * Name of the object being referenced.
     * @type {string}
     * @memberof RbacV1Subject
     */
    name: string;
    /**
     * Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
     * @type {string}
     * @memberof RbacV1Subject
     */
    namespace?: string;
}

/**
 * Check if a given object implements the RbacV1Subject interface.
 */
export function instanceOfRbacV1Subject(value: object): value is RbacV1Subject {
    if (!('kind' in value) || value['kind'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function RbacV1SubjectFromJSON(json: any): RbacV1Subject {
    return RbacV1SubjectFromJSONTyped(json, false);
}

export function RbacV1SubjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): RbacV1Subject {
    if (json == null) {
        return json;
    }
    return {
        
        'apiGroup': json['apiGroup'] == null ? undefined : json['apiGroup'],
        'kind': json['kind'],
        'name': json['name'],
        'namespace': json['namespace'] == null ? undefined : json['namespace'],
    };
}

export function RbacV1SubjectToJSON(value?: RbacV1Subject | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'apiGroup': value['apiGroup'],
        'kind': value['kind'],
        'name': value['name'],
        'namespace': value['namespace'],
    };
}

