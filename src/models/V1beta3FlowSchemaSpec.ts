/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1beta3FlowDistinguisherMethod } from './V1beta3FlowDistinguisherMethod';
import {
    V1beta3FlowDistinguisherMethodFromJSON,
    V1beta3FlowDistinguisherMethodFromJSONTyped,
    V1beta3FlowDistinguisherMethodToJSON,
} from './V1beta3FlowDistinguisherMethod';
import type { V1beta3PolicyRulesWithSubjects } from './V1beta3PolicyRulesWithSubjects';
import {
    V1beta3PolicyRulesWithSubjectsFromJSON,
    V1beta3PolicyRulesWithSubjectsFromJSONTyped,
    V1beta3PolicyRulesWithSubjectsToJSON,
} from './V1beta3PolicyRulesWithSubjects';
import type { V1beta3PriorityLevelConfigurationReference } from './V1beta3PriorityLevelConfigurationReference';
import {
    V1beta3PriorityLevelConfigurationReferenceFromJSON,
    V1beta3PriorityLevelConfigurationReferenceFromJSONTyped,
    V1beta3PriorityLevelConfigurationReferenceToJSON,
} from './V1beta3PriorityLevelConfigurationReference';

/**
 * FlowSchemaSpec describes how the FlowSchema's specification looks like.
 * @export
 * @interface V1beta3FlowSchemaSpec
 */
export interface V1beta3FlowSchemaSpec {
    /**
     * 
     * @type {V1beta3FlowDistinguisherMethod}
     * @memberof V1beta3FlowSchemaSpec
     */
    distinguisherMethod?: V1beta3FlowDistinguisherMethod;
    /**
     * `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
     * @type {number}
     * @memberof V1beta3FlowSchemaSpec
     */
    matchingPrecedence?: number;
    /**
     * 
     * @type {V1beta3PriorityLevelConfigurationReference}
     * @memberof V1beta3FlowSchemaSpec
     */
    priorityLevelConfiguration: V1beta3PriorityLevelConfigurationReference;
    /**
     * `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
     * @type {Array<V1beta3PolicyRulesWithSubjects>}
     * @memberof V1beta3FlowSchemaSpec
     */
    rules?: Array<V1beta3PolicyRulesWithSubjects>;
}

/**
 * Check if a given object implements the V1beta3FlowSchemaSpec interface.
 */
export function instanceOfV1beta3FlowSchemaSpec(value: object): value is V1beta3FlowSchemaSpec {
    if (!('priorityLevelConfiguration' in value) || value['priorityLevelConfiguration'] === undefined) return false;
    return true;
}

export function V1beta3FlowSchemaSpecFromJSON(json: any): V1beta3FlowSchemaSpec {
    return V1beta3FlowSchemaSpecFromJSONTyped(json, false);
}

export function V1beta3FlowSchemaSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta3FlowSchemaSpec {
    if (json == null) {
        return json;
    }
    return {
        
        'distinguisherMethod': json['distinguisherMethod'] == null ? undefined : V1beta3FlowDistinguisherMethodFromJSON(json['distinguisherMethod']),
        'matchingPrecedence': json['matchingPrecedence'] == null ? undefined : json['matchingPrecedence'],
        'priorityLevelConfiguration': V1beta3PriorityLevelConfigurationReferenceFromJSON(json['priorityLevelConfiguration']),
        'rules': json['rules'] == null ? undefined : ((json['rules'] as Array<any>).map(V1beta3PolicyRulesWithSubjectsFromJSON)),
    };
}

export function V1beta3FlowSchemaSpecToJSON(value?: V1beta3FlowSchemaSpec | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'distinguisherMethod': V1beta3FlowDistinguisherMethodToJSON(value['distinguisherMethod']),
        'matchingPrecedence': value['matchingPrecedence'],
        'priorityLevelConfiguration': V1beta3PriorityLevelConfigurationReferenceToJSON(value['priorityLevelConfiguration']),
        'rules': value['rules'] == null ? undefined : ((value['rules'] as Array<any>).map(V1beta3PolicyRulesWithSubjectsToJSON)),
    };
}

