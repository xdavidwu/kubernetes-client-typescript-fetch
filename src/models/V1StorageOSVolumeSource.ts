/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1LocalObjectReference } from './V1LocalObjectReference';
import {
    V1LocalObjectReferenceFromJSON,
    V1LocalObjectReferenceFromJSONTyped,
    V1LocalObjectReferenceToJSON,
} from './V1LocalObjectReference';

/**
 * Represents a StorageOS persistent volume resource.
 * @export
 * @interface V1StorageOSVolumeSource
 */
export interface V1StorageOSVolumeSource {
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * @type {string}
     * @memberof V1StorageOSVolumeSource
     */
    fsType?: string;
    /**
     * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @type {boolean}
     * @memberof V1StorageOSVolumeSource
     */
    readOnly?: boolean;
    /**
     * 
     * @type {V1LocalObjectReference}
     * @memberof V1StorageOSVolumeSource
     */
    secretRef?: V1LocalObjectReference;
    /**
     * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
     * @type {string}
     * @memberof V1StorageOSVolumeSource
     */
    volumeName?: string;
    /**
     * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
     * @type {string}
     * @memberof V1StorageOSVolumeSource
     */
    volumeNamespace?: string;
}

/**
 * Check if a given object implements the V1StorageOSVolumeSource interface.
 */
export function instanceOfV1StorageOSVolumeSource(value: object): value is V1StorageOSVolumeSource {
    return true;
}

export function V1StorageOSVolumeSourceFromJSON(json: any): V1StorageOSVolumeSource {
    return V1StorageOSVolumeSourceFromJSONTyped(json, false);
}

export function V1StorageOSVolumeSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1StorageOSVolumeSource {
    if (json == null) {
        return json;
    }
    return {
        
        'fsType': json['fsType'] == null ? undefined : json['fsType'],
        'readOnly': json['readOnly'] == null ? undefined : json['readOnly'],
        'secretRef': json['secretRef'] == null ? undefined : V1LocalObjectReferenceFromJSON(json['secretRef']),
        'volumeName': json['volumeName'] == null ? undefined : json['volumeName'],
        'volumeNamespace': json['volumeNamespace'] == null ? undefined : json['volumeNamespace'],
    };
}

export function V1StorageOSVolumeSourceToJSON(value?: V1StorageOSVolumeSource | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'fsType': value['fsType'],
        'readOnly': value['readOnly'],
        'secretRef': V1LocalObjectReferenceToJSON(value['secretRef']),
        'volumeName': value['volumeName'],
        'volumeNamespace': value['volumeNamespace'],
    };
}

