/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1TopologySelectorLabelRequirement,
    V1TopologySelectorLabelRequirementFromJSON,
    V1TopologySelectorLabelRequirementFromJSONTyped,
    V1TopologySelectorLabelRequirementToJSON,
} from './';

/**
 * A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
 * @export
 * @interface V1TopologySelectorTerm
 */
export interface V1TopologySelectorTerm {
    /**
     * A list of topology selector requirements by labels.
     * @type {Array<V1TopologySelectorLabelRequirement>}
     * @memberof V1TopologySelectorTerm
     */
    matchLabelExpressions?: Array<V1TopologySelectorLabelRequirement>;
}

export function V1TopologySelectorTermFromJSON(json: any): V1TopologySelectorTerm {
    return V1TopologySelectorTermFromJSONTyped(json, false);
}

export function V1TopologySelectorTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TopologySelectorTerm {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'matchLabelExpressions': !exists(json, 'matchLabelExpressions') ? undefined : ((json['matchLabelExpressions'] as Array<any>).map(V1TopologySelectorLabelRequirementFromJSON)),
    };
}

export function V1TopologySelectorTermToJSON(value?: V1TopologySelectorTerm | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'matchLabelExpressions': value.matchLabelExpressions === undefined ? undefined : ((value.matchLabelExpressions as Array<any>).map(V1TopologySelectorLabelRequirementToJSON)),
    };
}


