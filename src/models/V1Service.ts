/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1ObjectMeta } from './V1ObjectMeta';
import {
    V1ObjectMetaFromJSON,
    V1ObjectMetaFromJSONTyped,
    V1ObjectMetaToJSON,
} from './V1ObjectMeta';
import type { V1ServiceStatus } from './V1ServiceStatus';
import {
    V1ServiceStatusFromJSON,
    V1ServiceStatusFromJSONTyped,
    V1ServiceStatusToJSON,
} from './V1ServiceStatus';
import type { V1ServiceSpec } from './V1ServiceSpec';
import {
    V1ServiceSpecFromJSON,
    V1ServiceSpecFromJSONTyped,
    V1ServiceSpecToJSON,
} from './V1ServiceSpec';

/**
 * Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
 * @export
 * @interface V1Service
 */
export interface V1Service {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof V1Service
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof V1Service
     */
    kind?: string;
    /**
     * 
     * @type {V1ObjectMeta}
     * @memberof V1Service
     */
    metadata?: V1ObjectMeta;
    /**
     * 
     * @type {V1ServiceSpec}
     * @memberof V1Service
     */
    spec?: V1ServiceSpec;
    /**
     * 
     * @type {V1ServiceStatus}
     * @memberof V1Service
     */
    status?: V1ServiceStatus;
}

/**
 * Check if a given object implements the V1Service interface.
 */
export function instanceOfV1Service(value: object): value is V1Service {
    return true;
}

export function V1ServiceFromJSON(json: any): V1Service {
    return V1ServiceFromJSONTyped(json, false);
}

export function V1ServiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Service {
    if (json == null) {
        return json;
    }
    return {
        
        'apiVersion': json['apiVersion'] == null ? undefined : json['apiVersion'],
        'kind': json['kind'] == null ? undefined : json['kind'],
        'metadata': json['metadata'] == null ? undefined : V1ObjectMetaFromJSON(json['metadata']),
        'spec': json['spec'] == null ? undefined : V1ServiceSpecFromJSON(json['spec']),
        'status': json['status'] == null ? undefined : V1ServiceStatusFromJSON(json['status']),
    };
}

export function V1ServiceToJSON(value?: V1Service | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'apiVersion': value['apiVersion'],
        'kind': value['kind'],
        'metadata': V1ObjectMetaToJSON(value['metadata']),
        'spec': V1ServiceSpecToJSON(value['spec']),
        'status': V1ServiceStatusToJSON(value['status']),
    };
}

