/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1beta1IDRange } from './V1beta1IDRange';
import {
    V1beta1IDRangeFromJSON,
    V1beta1IDRangeFromJSONTyped,
    V1beta1IDRangeToJSON,
} from './V1beta1IDRange';

/**
 * FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
 * @export
 * @interface V1beta1FSGroupStrategyOptions
 */
export interface V1beta1FSGroupStrategyOptions {
    /**
     * ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
     * @type {Array<V1beta1IDRange>}
     * @memberof V1beta1FSGroupStrategyOptions
     */
    ranges?: Array<V1beta1IDRange>;
    /**
     * rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
     * @type {string}
     * @memberof V1beta1FSGroupStrategyOptions
     */
    rule?: string;
}

/**
 * Check if a given object implements the V1beta1FSGroupStrategyOptions interface.
 */
export function instanceOfV1beta1FSGroupStrategyOptions(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1beta1FSGroupStrategyOptionsFromJSON(json: any): V1beta1FSGroupStrategyOptions {
    return V1beta1FSGroupStrategyOptionsFromJSONTyped(json, false);
}

export function V1beta1FSGroupStrategyOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1FSGroupStrategyOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ranges': !exists(json, 'ranges') ? undefined : ((json['ranges'] as Array<any>).map(V1beta1IDRangeFromJSON)),
        'rule': !exists(json, 'rule') ? undefined : json['rule'],
    };
}

export function V1beta1FSGroupStrategyOptionsToJSON(value?: V1beta1FSGroupStrategyOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ranges': value.ranges === undefined ? undefined : ((value.ranges as Array<any>).map(V1beta1IDRangeToJSON)),
        'rule': value.rule,
    };
}

