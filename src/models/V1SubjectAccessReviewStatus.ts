/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * SubjectAccessReviewStatus
 * @export
 * @interface V1SubjectAccessReviewStatus
 */
export interface V1SubjectAccessReviewStatus {
    /**
     * Allowed is required. True if the action would be allowed, false otherwise.
     * @type {boolean}
     * @memberof V1SubjectAccessReviewStatus
     */
    allowed: boolean;
    /**
     * Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
     * @type {boolean}
     * @memberof V1SubjectAccessReviewStatus
     */
    denied?: boolean;
    /**
     * EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
     * @type {string}
     * @memberof V1SubjectAccessReviewStatus
     */
    evaluationError?: string;
    /**
     * Reason is optional.  It indicates why a request was allowed or denied.
     * @type {string}
     * @memberof V1SubjectAccessReviewStatus
     */
    reason?: string;
}

/**
 * Check if a given object implements the V1SubjectAccessReviewStatus interface.
 */
export function instanceOfV1SubjectAccessReviewStatus(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "allowed" in value;

    return isInstance;
}

export function V1SubjectAccessReviewStatusFromJSON(json: any): V1SubjectAccessReviewStatus {
    return V1SubjectAccessReviewStatusFromJSONTyped(json, false);
}

export function V1SubjectAccessReviewStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1SubjectAccessReviewStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowed': json['allowed'],
        'denied': !exists(json, 'denied') ? undefined : json['denied'],
        'evaluationError': !exists(json, 'evaluationError') ? undefined : json['evaluationError'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
    };
}

export function V1SubjectAccessReviewStatusToJSON(value?: V1SubjectAccessReviewStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowed': value.allowed,
        'denied': value.denied,
        'evaluationError': value.evaluationError,
        'reason': value.reason,
    };
}

